// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package main

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// CanWorkABI is the input ABI used to generate the binding from.
const CanWorkABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"emergencyTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"}],\"name\":\"cancelJobByProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_escrowId\",\"type\":\"uint256\"}],\"name\":\"getEscrow\",\"outputs\":[{\"name\":\"client\",\"type\":\"address\"},{\"name\":\"provider\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"totalValueDai\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"closedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"updatePriceOracleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"}],\"name\":\"completeJob\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"name\":\"_payToClientPercentage\",\"type\":\"uint8\"},{\"name\":\"_payToProviderPercentage\",\"type\":\"uint8\"},{\"name\":\"_arbiter\",\"type\":\"address\"},{\"name\":\"_payToArbiterPercentage\",\"type\":\"uint8\"}],\"name\":\"cancelJobByAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"}],\"name\":\"getJobPayments\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"valueInDai\",\"type\":\"uint256\"},{\"name\":\"payoutAmount\",\"type\":\"uint256\"},{\"name\":\"paidToDappAmount\",\"type\":\"uint256\"},{\"name\":\"paidToProviderAmount\",\"type\":\"uint256\"},{\"name\":\"paidToClientAmount\",\"type\":\"uint256\"},{\"name\":\"paidToArbiterAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"migrationId\",\"type\":\"string\"}],\"name\":\"isMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getEmergencyTransferSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"getEmergencyTransferSignersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_provider\",\"type\":\"address\"},{\"name\":\"_totalCosts\",\"type\":\"uint256\"}],\"name\":\"createJob\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"}],\"name\":\"getJob\",\"outputs\":[{\"name\":\"client\",\"type\":\"address\"},{\"name\":\"provider\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"valueInDai\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"closedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_canworkAdmin\",\"type\":\"address\"},{\"name\":\"_dApp\",\"type\":\"address\"},{\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_escrowId\",\"type\":\"uint256\"}],\"name\":\"getEscrowPayments\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"totalValueDai\",\"type\":\"uint256\"},{\"name\":\"payoutAmount\",\"type\":\"uint256\"},{\"name\":\"paidToDappAmount\",\"type\":\"uint256\"},{\"name\":\"paidToProviderAmount\",\"type\":\"uint256\"},{\"name\":\"paidToClientAmount\",\"type\":\"uint256\"},{\"name\":\"paidToArbiterAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"OnEmeregencyTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"jobId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalCosts\",\"type\":\"uint256\"}],\"name\":\"OnCreateJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"jobId\",\"type\":\"bytes32\"}],\"name\":\"OnCompleteJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"jobId\",\"type\":\"bytes32\"}],\"name\":\"OnCancelJobByProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"jobId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"payToProviderPercentage\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"arbiter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payToArbiterPercentage\",\"type\":\"uint8\"}],\"name\":\"OnCancelJobByAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"dApp\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"priceOracle\",\"type\":\"address\"}],\"name\":\"OnInitialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"OnCreateEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"escrowId\",\"type\":\"uint256\"}],\"name\":\"OnCompleteEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"escrowId\",\"type\":\"uint256\"}],\"name\":\"OnCancelEscrowByProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"escrowId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payToProviderAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"arbiter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payToArbiterAmount\",\"type\":\"uint256\"}],\"name\":\"OnCancelEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"migrationId\",\"type\":\"string\"}],\"name\":\"Migrated\",\"type\":\"event\"}]"

// CanWorkBin is the compiled bytecode used for deploying new contracts.
const CanWorkBin = ``

// DeployCanWork deploys a new Ethereum contract, binding an instance of CanWork to it.
func DeployCanWork(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CanWork, error) {
	parsed, err := abi.JSON(strings.NewReader(CanWorkABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CanWorkBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CanWork{CanWorkCaller: CanWorkCaller{contract: contract}, CanWorkTransactor: CanWorkTransactor{contract: contract}, CanWorkFilterer: CanWorkFilterer{contract: contract}}, nil
}

// CanWork is an auto generated Go binding around an Ethereum contract.
type CanWork struct {
	CanWorkCaller     // Read-only binding to the contract
	CanWorkTransactor // Write-only binding to the contract
	CanWorkFilterer   // Log filterer for contract events
}

// CanWorkCaller is an auto generated read-only Go binding around an Ethereum contract.
type CanWorkCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CanWorkTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CanWorkTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CanWorkFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CanWorkFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CanWorkSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CanWorkSession struct {
	Contract     *CanWork          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CanWorkCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CanWorkCallerSession struct {
	Contract *CanWorkCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// CanWorkTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CanWorkTransactorSession struct {
	Contract     *CanWorkTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// CanWorkRaw is an auto generated low-level Go binding around an Ethereum contract.
type CanWorkRaw struct {
	Contract *CanWork // Generic contract binding to access the raw methods on
}

// CanWorkCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CanWorkCallerRaw struct {
	Contract *CanWorkCaller // Generic read-only contract binding to access the raw methods on
}

// CanWorkTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CanWorkTransactorRaw struct {
	Contract *CanWorkTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCanWork creates a new instance of CanWork, bound to a specific deployed contract.
func NewCanWork(address common.Address, backend bind.ContractBackend) (*CanWork, error) {
	contract, err := bindCanWork(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CanWork{CanWorkCaller: CanWorkCaller{contract: contract}, CanWorkTransactor: CanWorkTransactor{contract: contract}, CanWorkFilterer: CanWorkFilterer{contract: contract}}, nil
}

// NewCanWorkCaller creates a new read-only instance of CanWork, bound to a specific deployed contract.
func NewCanWorkCaller(address common.Address, caller bind.ContractCaller) (*CanWorkCaller, error) {
	contract, err := bindCanWork(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CanWorkCaller{contract: contract}, nil
}

// NewCanWorkTransactor creates a new write-only instance of CanWork, bound to a specific deployed contract.
func NewCanWorkTransactor(address common.Address, transactor bind.ContractTransactor) (*CanWorkTransactor, error) {
	contract, err := bindCanWork(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CanWorkTransactor{contract: contract}, nil
}

// NewCanWorkFilterer creates a new log filterer instance of CanWork, bound to a specific deployed contract.
func NewCanWorkFilterer(address common.Address, filterer bind.ContractFilterer) (*CanWorkFilterer, error) {
	contract, err := bindCanWork(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CanWorkFilterer{contract: contract}, nil
}

// bindCanWork binds a generic wrapper to an already deployed contract.
func bindCanWork(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CanWorkABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CanWork *CanWorkRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CanWork.Contract.CanWorkCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CanWork *CanWorkRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CanWork.Contract.CanWorkTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CanWork *CanWorkRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CanWork.Contract.CanWorkTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CanWork *CanWorkCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CanWork.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CanWork *CanWorkTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CanWork.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CanWork *CanWorkTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CanWork.Contract.contract.Transact(opts, method, params...)
}

// ROLEADMIN is a free data retrieval call binding the contract method 0xd391014b.
//
// Solidity: function ROLE_ADMIN() constant returns(string)
func (_CanWork *CanWorkCaller) ROLEADMIN(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _CanWork.contract.Call(opts, out, "ROLE_ADMIN")
	return *ret0, err
}

// ROLEADMIN is a free data retrieval call binding the contract method 0xd391014b.
//
// Solidity: function ROLE_ADMIN() constant returns(string)
func (_CanWork *CanWorkSession) ROLEADMIN() (string, error) {
	return _CanWork.Contract.ROLEADMIN(&_CanWork.CallOpts)
}

// ROLEADMIN is a free data retrieval call binding the contract method 0xd391014b.
//
// Solidity: function ROLE_ADMIN() constant returns(string)
func (_CanWork *CanWorkCallerSession) ROLEADMIN() (string, error) {
	return _CanWork.Contract.ROLEADMIN(&_CanWork.CallOpts)
}

// ROLEOWNER is a free data retrieval call binding the contract method 0x8ad682af.
//
// Solidity: function ROLE_OWNER() constant returns(string)
func (_CanWork *CanWorkCaller) ROLEOWNER(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _CanWork.contract.Call(opts, out, "ROLE_OWNER")
	return *ret0, err
}

// ROLEOWNER is a free data retrieval call binding the contract method 0x8ad682af.
//
// Solidity: function ROLE_OWNER() constant returns(string)
func (_CanWork *CanWorkSession) ROLEOWNER() (string, error) {
	return _CanWork.Contract.ROLEOWNER(&_CanWork.CallOpts)
}

// ROLEOWNER is a free data retrieval call binding the contract method 0x8ad682af.
//
// Solidity: function ROLE_OWNER() constant returns(string)
func (_CanWork *CanWorkCallerSession) ROLEOWNER() (string, error) {
	return _CanWork.Contract.ROLEOWNER(&_CanWork.CallOpts)
}

// GetEmergencyTransferSigner is a free data retrieval call binding the contract method 0xd047a0d0.
//
// Solidity: function getEmergencyTransferSigner(_toAddress address, index uint256) constant returns(address, bool)
func (_CanWork *CanWorkCaller) GetEmergencyTransferSigner(opts *bind.CallOpts, _toAddress common.Address, index *big.Int) (common.Address, bool, error) {
	var (
		ret0 = new(common.Address)
		ret1 = new(bool)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _CanWork.contract.Call(opts, out, "getEmergencyTransferSigner", _toAddress, index)
	return *ret0, *ret1, err
}

// GetEmergencyTransferSigner is a free data retrieval call binding the contract method 0xd047a0d0.
//
// Solidity: function getEmergencyTransferSigner(_toAddress address, index uint256) constant returns(address, bool)
func (_CanWork *CanWorkSession) GetEmergencyTransferSigner(_toAddress common.Address, index *big.Int) (common.Address, bool, error) {
	return _CanWork.Contract.GetEmergencyTransferSigner(&_CanWork.CallOpts, _toAddress, index)
}

// GetEmergencyTransferSigner is a free data retrieval call binding the contract method 0xd047a0d0.
//
// Solidity: function getEmergencyTransferSigner(_toAddress address, index uint256) constant returns(address, bool)
func (_CanWork *CanWorkCallerSession) GetEmergencyTransferSigner(_toAddress common.Address, index *big.Int) (common.Address, bool, error) {
	return _CanWork.Contract.GetEmergencyTransferSigner(&_CanWork.CallOpts, _toAddress, index)
}

// GetEmergencyTransferSignersCount is a free data retrieval call binding the contract method 0xdea90acf.
//
// Solidity: function getEmergencyTransferSignersCount(_toAddress address) constant returns(uint256)
func (_CanWork *CanWorkCaller) GetEmergencyTransferSignersCount(opts *bind.CallOpts, _toAddress common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _CanWork.contract.Call(opts, out, "getEmergencyTransferSignersCount", _toAddress)
	return *ret0, err
}

// GetEmergencyTransferSignersCount is a free data retrieval call binding the contract method 0xdea90acf.
//
// Solidity: function getEmergencyTransferSignersCount(_toAddress address) constant returns(uint256)
func (_CanWork *CanWorkSession) GetEmergencyTransferSignersCount(_toAddress common.Address) (*big.Int, error) {
	return _CanWork.Contract.GetEmergencyTransferSignersCount(&_CanWork.CallOpts, _toAddress)
}

// GetEmergencyTransferSignersCount is a free data retrieval call binding the contract method 0xdea90acf.
//
// Solidity: function getEmergencyTransferSignersCount(_toAddress address) constant returns(uint256)
func (_CanWork *CanWorkCallerSession) GetEmergencyTransferSignersCount(_toAddress common.Address) (*big.Int, error) {
	return _CanWork.Contract.GetEmergencyTransferSignersCount(&_CanWork.CallOpts, _toAddress)
}

// GetEscrow is a free data retrieval call binding the contract method 0x7d19e596.
//
// Solidity: function getEscrow(_escrowId uint256) constant returns(client address, provider address, amount uint256, totalValueDai uint256, status uint8, createdAt uint256, closedAt uint256)
func (_CanWork *CanWorkCaller) GetEscrow(opts *bind.CallOpts, _escrowId *big.Int) (struct {
	Client        common.Address
	Provider      common.Address
	Amount        *big.Int
	TotalValueDai *big.Int
	Status        uint8
	CreatedAt     *big.Int
	ClosedAt      *big.Int
}, error) {
	ret := new(struct {
		Client        common.Address
		Provider      common.Address
		Amount        *big.Int
		TotalValueDai *big.Int
		Status        uint8
		CreatedAt     *big.Int
		ClosedAt      *big.Int
	})
	out := ret
	err := _CanWork.contract.Call(opts, out, "getEscrow", _escrowId)
	return *ret, err
}

// GetEscrow is a free data retrieval call binding the contract method 0x7d19e596.
//
// Solidity: function getEscrow(_escrowId uint256) constant returns(client address, provider address, amount uint256, totalValueDai uint256, status uint8, createdAt uint256, closedAt uint256)
func (_CanWork *CanWorkSession) GetEscrow(_escrowId *big.Int) (struct {
	Client        common.Address
	Provider      common.Address
	Amount        *big.Int
	TotalValueDai *big.Int
	Status        uint8
	CreatedAt     *big.Int
	ClosedAt      *big.Int
}, error) {
	return _CanWork.Contract.GetEscrow(&_CanWork.CallOpts, _escrowId)
}

// GetEscrow is a free data retrieval call binding the contract method 0x7d19e596.
//
// Solidity: function getEscrow(_escrowId uint256) constant returns(client address, provider address, amount uint256, totalValueDai uint256, status uint8, createdAt uint256, closedAt uint256)
func (_CanWork *CanWorkCallerSession) GetEscrow(_escrowId *big.Int) (struct {
	Client        common.Address
	Provider      common.Address
	Amount        *big.Int
	TotalValueDai *big.Int
	Status        uint8
	CreatedAt     *big.Int
	ClosedAt      *big.Int
}, error) {
	return _CanWork.Contract.GetEscrow(&_CanWork.CallOpts, _escrowId)
}

// GetEscrowPayments is a free data retrieval call binding the contract method 0xfd232b59.
//
// Solidity: function getEscrowPayments(_escrowId uint256) constant returns(amount uint256, totalValueDai uint256, payoutAmount uint256, paidToDappAmount uint256, paidToProviderAmount uint256, paidToClientAmount uint256, paidToArbiterAmount uint256)
func (_CanWork *CanWorkCaller) GetEscrowPayments(opts *bind.CallOpts, _escrowId *big.Int) (struct {
	Amount               *big.Int
	TotalValueDai        *big.Int
	PayoutAmount         *big.Int
	PaidToDappAmount     *big.Int
	PaidToProviderAmount *big.Int
	PaidToClientAmount   *big.Int
	PaidToArbiterAmount  *big.Int
}, error) {
	ret := new(struct {
		Amount               *big.Int
		TotalValueDai        *big.Int
		PayoutAmount         *big.Int
		PaidToDappAmount     *big.Int
		PaidToProviderAmount *big.Int
		PaidToClientAmount   *big.Int
		PaidToArbiterAmount  *big.Int
	})
	out := ret
	err := _CanWork.contract.Call(opts, out, "getEscrowPayments", _escrowId)
	return *ret, err
}

// GetEscrowPayments is a free data retrieval call binding the contract method 0xfd232b59.
//
// Solidity: function getEscrowPayments(_escrowId uint256) constant returns(amount uint256, totalValueDai uint256, payoutAmount uint256, paidToDappAmount uint256, paidToProviderAmount uint256, paidToClientAmount uint256, paidToArbiterAmount uint256)
func (_CanWork *CanWorkSession) GetEscrowPayments(_escrowId *big.Int) (struct {
	Amount               *big.Int
	TotalValueDai        *big.Int
	PayoutAmount         *big.Int
	PaidToDappAmount     *big.Int
	PaidToProviderAmount *big.Int
	PaidToClientAmount   *big.Int
	PaidToArbiterAmount  *big.Int
}, error) {
	return _CanWork.Contract.GetEscrowPayments(&_CanWork.CallOpts, _escrowId)
}

// GetEscrowPayments is a free data retrieval call binding the contract method 0xfd232b59.
//
// Solidity: function getEscrowPayments(_escrowId uint256) constant returns(amount uint256, totalValueDai uint256, payoutAmount uint256, paidToDappAmount uint256, paidToProviderAmount uint256, paidToClientAmount uint256, paidToArbiterAmount uint256)
func (_CanWork *CanWorkCallerSession) GetEscrowPayments(_escrowId *big.Int) (struct {
	Amount               *big.Int
	TotalValueDai        *big.Int
	PayoutAmount         *big.Int
	PaidToDappAmount     *big.Int
	PaidToProviderAmount *big.Int
	PaidToClientAmount   *big.Int
	PaidToArbiterAmount  *big.Int
}, error) {
	return _CanWork.Contract.GetEscrowPayments(&_CanWork.CallOpts, _escrowId)
}

// GetJob is a free data retrieval call binding the contract method 0xf729cf0d.
//
// Solidity: function getJob(_jobId bytes32) constant returns(client address, provider address, amount uint256, valueInDai uint256, status uint8, createdAt uint256, closedAt uint256)
func (_CanWork *CanWorkCaller) GetJob(opts *bind.CallOpts, _jobId [32]byte) (struct {
	Client     common.Address
	Provider   common.Address
	Amount     *big.Int
	ValueInDai *big.Int
	Status     uint8
	CreatedAt  *big.Int
	ClosedAt   *big.Int
}, error) {
	ret := new(struct {
		Client     common.Address
		Provider   common.Address
		Amount     *big.Int
		ValueInDai *big.Int
		Status     uint8
		CreatedAt  *big.Int
		ClosedAt   *big.Int
	})
	out := ret
	err := _CanWork.contract.Call(opts, out, "getJob", _jobId)
	return *ret, err
}

// GetJob is a free data retrieval call binding the contract method 0xf729cf0d.
//
// Solidity: function getJob(_jobId bytes32) constant returns(client address, provider address, amount uint256, valueInDai uint256, status uint8, createdAt uint256, closedAt uint256)
func (_CanWork *CanWorkSession) GetJob(_jobId [32]byte) (struct {
	Client     common.Address
	Provider   common.Address
	Amount     *big.Int
	ValueInDai *big.Int
	Status     uint8
	CreatedAt  *big.Int
	ClosedAt   *big.Int
}, error) {
	return _CanWork.Contract.GetJob(&_CanWork.CallOpts, _jobId)
}

// GetJob is a free data retrieval call binding the contract method 0xf729cf0d.
//
// Solidity: function getJob(_jobId bytes32) constant returns(client address, provider address, amount uint256, valueInDai uint256, status uint8, createdAt uint256, closedAt uint256)
func (_CanWork *CanWorkCallerSession) GetJob(_jobId [32]byte) (struct {
	Client     common.Address
	Provider   common.Address
	Amount     *big.Int
	ValueInDai *big.Int
	Status     uint8
	CreatedAt  *big.Int
	ClosedAt   *big.Int
}, error) {
	return _CanWork.Contract.GetJob(&_CanWork.CallOpts, _jobId)
}

// GetJobPayments is a free data retrieval call binding the contract method 0xafcfad6e.
//
// Solidity: function getJobPayments(_jobId bytes32) constant returns(amount uint256, valueInDai uint256, payoutAmount uint256, paidToDappAmount uint256, paidToProviderAmount uint256, paidToClientAmount uint256, paidToArbiterAmount uint256)
func (_CanWork *CanWorkCaller) GetJobPayments(opts *bind.CallOpts, _jobId [32]byte) (struct {
	Amount               *big.Int
	ValueInDai           *big.Int
	PayoutAmount         *big.Int
	PaidToDappAmount     *big.Int
	PaidToProviderAmount *big.Int
	PaidToClientAmount   *big.Int
	PaidToArbiterAmount  *big.Int
}, error) {
	ret := new(struct {
		Amount               *big.Int
		ValueInDai           *big.Int
		PayoutAmount         *big.Int
		PaidToDappAmount     *big.Int
		PaidToProviderAmount *big.Int
		PaidToClientAmount   *big.Int
		PaidToArbiterAmount  *big.Int
	})
	out := ret
	err := _CanWork.contract.Call(opts, out, "getJobPayments", _jobId)
	return *ret, err
}

// GetJobPayments is a free data retrieval call binding the contract method 0xafcfad6e.
//
// Solidity: function getJobPayments(_jobId bytes32) constant returns(amount uint256, valueInDai uint256, payoutAmount uint256, paidToDappAmount uint256, paidToProviderAmount uint256, paidToClientAmount uint256, paidToArbiterAmount uint256)
func (_CanWork *CanWorkSession) GetJobPayments(_jobId [32]byte) (struct {
	Amount               *big.Int
	ValueInDai           *big.Int
	PayoutAmount         *big.Int
	PaidToDappAmount     *big.Int
	PaidToProviderAmount *big.Int
	PaidToClientAmount   *big.Int
	PaidToArbiterAmount  *big.Int
}, error) {
	return _CanWork.Contract.GetJobPayments(&_CanWork.CallOpts, _jobId)
}

// GetJobPayments is a free data retrieval call binding the contract method 0xafcfad6e.
//
// Solidity: function getJobPayments(_jobId bytes32) constant returns(amount uint256, valueInDai uint256, payoutAmount uint256, paidToDappAmount uint256, paidToProviderAmount uint256, paidToClientAmount uint256, paidToArbiterAmount uint256)
func (_CanWork *CanWorkCallerSession) GetJobPayments(_jobId [32]byte) (struct {
	Amount               *big.Int
	ValueInDai           *big.Int
	PayoutAmount         *big.Int
	PaidToDappAmount     *big.Int
	PaidToProviderAmount *big.Int
	PaidToClientAmount   *big.Int
	PaidToArbiterAmount  *big.Int
}, error) {
	return _CanWork.Contract.GetJobPayments(&_CanWork.CallOpts, _jobId)
}

// IsMigrated is a free data retrieval call binding the contract method 0xc0bac1a8.
//
// Solidity: function isMigrated(contractName string, migrationId string) constant returns(bool)
func (_CanWork *CanWorkCaller) IsMigrated(opts *bind.CallOpts, contractName string, migrationId string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CanWork.contract.Call(opts, out, "isMigrated", contractName, migrationId)
	return *ret0, err
}

// IsMigrated is a free data retrieval call binding the contract method 0xc0bac1a8.
//
// Solidity: function isMigrated(contractName string, migrationId string) constant returns(bool)
func (_CanWork *CanWorkSession) IsMigrated(contractName string, migrationId string) (bool, error) {
	return _CanWork.Contract.IsMigrated(&_CanWork.CallOpts, contractName, migrationId)
}

// IsMigrated is a free data retrieval call binding the contract method 0xc0bac1a8.
//
// Solidity: function isMigrated(contractName string, migrationId string) constant returns(bool)
func (_CanWork *CanWorkCallerSession) IsMigrated(contractName string, migrationId string) (bool, error) {
	return _CanWork.Contract.IsMigrated(&_CanWork.CallOpts, contractName, migrationId)
}

// PriceOracle is a free data retrieval call binding the contract method 0x2630c12f.
//
// Solidity: function priceOracle() constant returns(address)
func (_CanWork *CanWorkCaller) PriceOracle(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CanWork.contract.Call(opts, out, "priceOracle")
	return *ret0, err
}

// PriceOracle is a free data retrieval call binding the contract method 0x2630c12f.
//
// Solidity: function priceOracle() constant returns(address)
func (_CanWork *CanWorkSession) PriceOracle() (common.Address, error) {
	return _CanWork.Contract.PriceOracle(&_CanWork.CallOpts)
}

// PriceOracle is a free data retrieval call binding the contract method 0x2630c12f.
//
// Solidity: function priceOracle() constant returns(address)
func (_CanWork *CanWorkCallerSession) PriceOracle() (common.Address, error) {
	return _CanWork.Contract.PriceOracle(&_CanWork.CallOpts)
}

// CancelJobByAdmin is a paid mutator transaction binding the contract method 0xa52c7a4f.
//
// Solidity: function cancelJobByAdmin(_jobId bytes32, _payToClientPercentage uint8, _payToProviderPercentage uint8, _arbiter address, _payToArbiterPercentage uint8) returns(bool)
func (_CanWork *CanWorkTransactor) CancelJobByAdmin(opts *bind.TransactOpts, _jobId [32]byte, _payToClientPercentage uint8, _payToProviderPercentage uint8, _arbiter common.Address, _payToArbiterPercentage uint8) (*types.Transaction, error) {
	return _CanWork.contract.Transact(opts, "cancelJobByAdmin", _jobId, _payToClientPercentage, _payToProviderPercentage, _arbiter, _payToArbiterPercentage)
}

// CancelJobByAdmin is a paid mutator transaction binding the contract method 0xa52c7a4f.
//
// Solidity: function cancelJobByAdmin(_jobId bytes32, _payToClientPercentage uint8, _payToProviderPercentage uint8, _arbiter address, _payToArbiterPercentage uint8) returns(bool)
func (_CanWork *CanWorkSession) CancelJobByAdmin(_jobId [32]byte, _payToClientPercentage uint8, _payToProviderPercentage uint8, _arbiter common.Address, _payToArbiterPercentage uint8) (*types.Transaction, error) {
	return _CanWork.Contract.CancelJobByAdmin(&_CanWork.TransactOpts, _jobId, _payToClientPercentage, _payToProviderPercentage, _arbiter, _payToArbiterPercentage)
}

// CancelJobByAdmin is a paid mutator transaction binding the contract method 0xa52c7a4f.
//
// Solidity: function cancelJobByAdmin(_jobId bytes32, _payToClientPercentage uint8, _payToProviderPercentage uint8, _arbiter address, _payToArbiterPercentage uint8) returns(bool)
func (_CanWork *CanWorkTransactorSession) CancelJobByAdmin(_jobId [32]byte, _payToClientPercentage uint8, _payToProviderPercentage uint8, _arbiter common.Address, _payToArbiterPercentage uint8) (*types.Transaction, error) {
	return _CanWork.Contract.CancelJobByAdmin(&_CanWork.TransactOpts, _jobId, _payToClientPercentage, _payToProviderPercentage, _arbiter, _payToArbiterPercentage)
}

// CancelJobByProvider is a paid mutator transaction binding the contract method 0x6e6bfca0.
//
// Solidity: function cancelJobByProvider(_jobId bytes32) returns(bool)
func (_CanWork *CanWorkTransactor) CancelJobByProvider(opts *bind.TransactOpts, _jobId [32]byte) (*types.Transaction, error) {
	return _CanWork.contract.Transact(opts, "cancelJobByProvider", _jobId)
}

// CancelJobByProvider is a paid mutator transaction binding the contract method 0x6e6bfca0.
//
// Solidity: function cancelJobByProvider(_jobId bytes32) returns(bool)
func (_CanWork *CanWorkSession) CancelJobByProvider(_jobId [32]byte) (*types.Transaction, error) {
	return _CanWork.Contract.CancelJobByProvider(&_CanWork.TransactOpts, _jobId)
}

// CancelJobByProvider is a paid mutator transaction binding the contract method 0x6e6bfca0.
//
// Solidity: function cancelJobByProvider(_jobId bytes32) returns(bool)
func (_CanWork *CanWorkTransactorSession) CancelJobByProvider(_jobId [32]byte) (*types.Transaction, error) {
	return _CanWork.Contract.CancelJobByProvider(&_CanWork.TransactOpts, _jobId)
}

// CompleteJob is a paid mutator transaction binding the contract method 0x991e0139.
//
// Solidity: function completeJob(_jobId bytes32) returns(bool)
func (_CanWork *CanWorkTransactor) CompleteJob(opts *bind.TransactOpts, _jobId [32]byte) (*types.Transaction, error) {
	return _CanWork.contract.Transact(opts, "completeJob", _jobId)
}

// CompleteJob is a paid mutator transaction binding the contract method 0x991e0139.
//
// Solidity: function completeJob(_jobId bytes32) returns(bool)
func (_CanWork *CanWorkSession) CompleteJob(_jobId [32]byte) (*types.Transaction, error) {
	return _CanWork.Contract.CompleteJob(&_CanWork.TransactOpts, _jobId)
}

// CompleteJob is a paid mutator transaction binding the contract method 0x991e0139.
//
// Solidity: function completeJob(_jobId bytes32) returns(bool)
func (_CanWork *CanWorkTransactorSession) CompleteJob(_jobId [32]byte) (*types.Transaction, error) {
	return _CanWork.Contract.CompleteJob(&_CanWork.TransactOpts, _jobId)
}

// CreateJob is a paid mutator transaction binding the contract method 0xe7acaa1e.
//
// Solidity: function createJob(_jobId bytes32, _client address, _provider address, _totalCosts uint256) returns(bool)
func (_CanWork *CanWorkTransactor) CreateJob(opts *bind.TransactOpts, _jobId [32]byte, _client common.Address, _provider common.Address, _totalCosts *big.Int) (*types.Transaction, error) {
	return _CanWork.contract.Transact(opts, "createJob", _jobId, _client, _provider, _totalCosts)
}

// CreateJob is a paid mutator transaction binding the contract method 0xe7acaa1e.
//
// Solidity: function createJob(_jobId bytes32, _client address, _provider address, _totalCosts uint256) returns(bool)
func (_CanWork *CanWorkSession) CreateJob(_jobId [32]byte, _client common.Address, _provider common.Address, _totalCosts *big.Int) (*types.Transaction, error) {
	return _CanWork.Contract.CreateJob(&_CanWork.TransactOpts, _jobId, _client, _provider, _totalCosts)
}

// CreateJob is a paid mutator transaction binding the contract method 0xe7acaa1e.
//
// Solidity: function createJob(_jobId bytes32, _client address, _provider address, _totalCosts uint256) returns(bool)
func (_CanWork *CanWorkTransactorSession) CreateJob(_jobId [32]byte, _client common.Address, _provider common.Address, _totalCosts *big.Int) (*types.Transaction, error) {
	return _CanWork.Contract.CreateJob(&_CanWork.TransactOpts, _jobId, _client, _provider, _totalCosts)
}

// EmergencyTransfer is a paid mutator transaction binding the contract method 0x0e501834.
//
// Solidity: function emergencyTransfer(toAddress address) returns(bool)
func (_CanWork *CanWorkTransactor) EmergencyTransfer(opts *bind.TransactOpts, toAddress common.Address) (*types.Transaction, error) {
	return _CanWork.contract.Transact(opts, "emergencyTransfer", toAddress)
}

// EmergencyTransfer is a paid mutator transaction binding the contract method 0x0e501834.
//
// Solidity: function emergencyTransfer(toAddress address) returns(bool)
func (_CanWork *CanWorkSession) EmergencyTransfer(toAddress common.Address) (*types.Transaction, error) {
	return _CanWork.Contract.EmergencyTransfer(&_CanWork.TransactOpts, toAddress)
}

// EmergencyTransfer is a paid mutator transaction binding the contract method 0x0e501834.
//
// Solidity: function emergencyTransfer(toAddress address) returns(bool)
func (_CanWork *CanWorkTransactorSession) EmergencyTransfer(toAddress common.Address) (*types.Transaction, error) {
	return _CanWork.Contract.EmergencyTransfer(&_CanWork.TransactOpts, toAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(_token address, _canworkAdmin address, _dApp address, _priceOracle address) returns()
func (_CanWork *CanWorkTransactor) Initialize(opts *bind.TransactOpts, _token common.Address, _canworkAdmin common.Address, _dApp common.Address, _priceOracle common.Address) (*types.Transaction, error) {
	return _CanWork.contract.Transact(opts, "initialize", _token, _canworkAdmin, _dApp, _priceOracle)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(_token address, _canworkAdmin address, _dApp address, _priceOracle address) returns()
func (_CanWork *CanWorkSession) Initialize(_token common.Address, _canworkAdmin common.Address, _dApp common.Address, _priceOracle common.Address) (*types.Transaction, error) {
	return _CanWork.Contract.Initialize(&_CanWork.TransactOpts, _token, _canworkAdmin, _dApp, _priceOracle)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(_token address, _canworkAdmin address, _dApp address, _priceOracle address) returns()
func (_CanWork *CanWorkTransactorSession) Initialize(_token common.Address, _canworkAdmin common.Address, _dApp common.Address, _priceOracle common.Address) (*types.Transaction, error) {
	return _CanWork.Contract.Initialize(&_CanWork.TransactOpts, _token, _canworkAdmin, _dApp, _priceOracle)
}

// UpdatePriceOracleAddress is a paid mutator transaction binding the contract method 0x86d1e02b.
//
// Solidity: function updatePriceOracleAddress(_oracle address) returns()
func (_CanWork *CanWorkTransactor) UpdatePriceOracleAddress(opts *bind.TransactOpts, _oracle common.Address) (*types.Transaction, error) {
	return _CanWork.contract.Transact(opts, "updatePriceOracleAddress", _oracle)
}

// UpdatePriceOracleAddress is a paid mutator transaction binding the contract method 0x86d1e02b.
//
// Solidity: function updatePriceOracleAddress(_oracle address) returns()
func (_CanWork *CanWorkSession) UpdatePriceOracleAddress(_oracle common.Address) (*types.Transaction, error) {
	return _CanWork.Contract.UpdatePriceOracleAddress(&_CanWork.TransactOpts, _oracle)
}

// UpdatePriceOracleAddress is a paid mutator transaction binding the contract method 0x86d1e02b.
//
// Solidity: function updatePriceOracleAddress(_oracle address) returns()
func (_CanWork *CanWorkTransactorSession) UpdatePriceOracleAddress(_oracle common.Address) (*types.Transaction, error) {
	return _CanWork.Contract.UpdatePriceOracleAddress(&_CanWork.TransactOpts, _oracle)
}

// CanWorkMigratedIterator is returned from FilterMigrated and is used to iterate over the raw logs and unpacked data for Migrated events raised by the CanWork contract.
type CanWorkMigratedIterator struct {
	Event *CanWorkMigrated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkMigratedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkMigrated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkMigrated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkMigratedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkMigratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkMigrated represents a Migrated event raised by the CanWork contract.
type CanWorkMigrated struct {
	ContractName string
	MigrationId  string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterMigrated is a free log retrieval operation binding the contract event 0xdd117a11c22118c9dee4b5a67ce578bc44529dce21ee0ccc439588fbb9fb4ea3.
//
// Solidity: e Migrated(contractName string, migrationId string)
func (_CanWork *CanWorkFilterer) FilterMigrated(opts *bind.FilterOpts) (*CanWorkMigratedIterator, error) {

	logs, sub, err := _CanWork.contract.FilterLogs(opts, "Migrated")
	if err != nil {
		return nil, err
	}
	return &CanWorkMigratedIterator{contract: _CanWork.contract, event: "Migrated", logs: logs, sub: sub}, nil
}

// WatchMigrated is a free log subscription operation binding the contract event 0xdd117a11c22118c9dee4b5a67ce578bc44529dce21ee0ccc439588fbb9fb4ea3.
//
// Solidity: e Migrated(contractName string, migrationId string)
func (_CanWork *CanWorkFilterer) WatchMigrated(opts *bind.WatchOpts, sink chan<- *CanWorkMigrated) (event.Subscription, error) {

	logs, sub, err := _CanWork.contract.WatchLogs(opts, "Migrated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkMigrated)
				if err := _CanWork.contract.UnpackLog(event, "Migrated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkOnCancelEscrowIterator is returned from FilterOnCancelEscrow and is used to iterate over the raw logs and unpacked data for OnCancelEscrow events raised by the CanWork contract.
type CanWorkOnCancelEscrowIterator struct {
	Event *CanWorkOnCancelEscrow // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkOnCancelEscrowIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkOnCancelEscrow)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkOnCancelEscrow)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkOnCancelEscrowIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkOnCancelEscrowIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkOnCancelEscrow represents a OnCancelEscrow event raised by the CanWork contract.
type CanWorkOnCancelEscrow struct {
	Dapp                common.Address
	EscrowId            *big.Int
	PayToProviderAmount *big.Int
	Arbiter             common.Address
	PayToArbiterAmount  *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterOnCancelEscrow is a free log retrieval operation binding the contract event 0x23157ee5a4e89bcebb1fc3e9b6e1533aefe88f9bde92308b49a71e800103542b.
//
// Solidity: e OnCancelEscrow(dapp indexed address, escrowId indexed uint256, payToProviderAmount uint256, arbiter indexed address, payToArbiterAmount uint256)
func (_CanWork *CanWorkFilterer) FilterOnCancelEscrow(opts *bind.FilterOpts, dapp []common.Address, escrowId []*big.Int, arbiter []common.Address) (*CanWorkOnCancelEscrowIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var escrowIdRule []interface{}
	for _, escrowIdItem := range escrowId {
		escrowIdRule = append(escrowIdRule, escrowIdItem)
	}

	var arbiterRule []interface{}
	for _, arbiterItem := range arbiter {
		arbiterRule = append(arbiterRule, arbiterItem)
	}

	logs, sub, err := _CanWork.contract.FilterLogs(opts, "OnCancelEscrow", dappRule, escrowIdRule, arbiterRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkOnCancelEscrowIterator{contract: _CanWork.contract, event: "OnCancelEscrow", logs: logs, sub: sub}, nil
}

// WatchOnCancelEscrow is a free log subscription operation binding the contract event 0x23157ee5a4e89bcebb1fc3e9b6e1533aefe88f9bde92308b49a71e800103542b.
//
// Solidity: e OnCancelEscrow(dapp indexed address, escrowId indexed uint256, payToProviderAmount uint256, arbiter indexed address, payToArbiterAmount uint256)
func (_CanWork *CanWorkFilterer) WatchOnCancelEscrow(opts *bind.WatchOpts, sink chan<- *CanWorkOnCancelEscrow, dapp []common.Address, escrowId []*big.Int, arbiter []common.Address) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var escrowIdRule []interface{}
	for _, escrowIdItem := range escrowId {
		escrowIdRule = append(escrowIdRule, escrowIdItem)
	}

	var arbiterRule []interface{}
	for _, arbiterItem := range arbiter {
		arbiterRule = append(arbiterRule, arbiterItem)
	}

	logs, sub, err := _CanWork.contract.WatchLogs(opts, "OnCancelEscrow", dappRule, escrowIdRule, arbiterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkOnCancelEscrow)
				if err := _CanWork.contract.UnpackLog(event, "OnCancelEscrow", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkOnCancelEscrowByProviderIterator is returned from FilterOnCancelEscrowByProvider and is used to iterate over the raw logs and unpacked data for OnCancelEscrowByProvider events raised by the CanWork contract.
type CanWorkOnCancelEscrowByProviderIterator struct {
	Event *CanWorkOnCancelEscrowByProvider // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkOnCancelEscrowByProviderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkOnCancelEscrowByProvider)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkOnCancelEscrowByProvider)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkOnCancelEscrowByProviderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkOnCancelEscrowByProviderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkOnCancelEscrowByProvider represents a OnCancelEscrowByProvider event raised by the CanWork contract.
type CanWorkOnCancelEscrowByProvider struct {
	Dapp     common.Address
	EscrowId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOnCancelEscrowByProvider is a free log retrieval operation binding the contract event 0x42a9d051cfad92ff80e72d1f2fe48fd37941d2e3d8a231b4a2a6993474dd6726.
//
// Solidity: e OnCancelEscrowByProvider(dapp indexed address, escrowId indexed uint256)
func (_CanWork *CanWorkFilterer) FilterOnCancelEscrowByProvider(opts *bind.FilterOpts, dapp []common.Address, escrowId []*big.Int) (*CanWorkOnCancelEscrowByProviderIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var escrowIdRule []interface{}
	for _, escrowIdItem := range escrowId {
		escrowIdRule = append(escrowIdRule, escrowIdItem)
	}

	logs, sub, err := _CanWork.contract.FilterLogs(opts, "OnCancelEscrowByProvider", dappRule, escrowIdRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkOnCancelEscrowByProviderIterator{contract: _CanWork.contract, event: "OnCancelEscrowByProvider", logs: logs, sub: sub}, nil
}

// WatchOnCancelEscrowByProvider is a free log subscription operation binding the contract event 0x42a9d051cfad92ff80e72d1f2fe48fd37941d2e3d8a231b4a2a6993474dd6726.
//
// Solidity: e OnCancelEscrowByProvider(dapp indexed address, escrowId indexed uint256)
func (_CanWork *CanWorkFilterer) WatchOnCancelEscrowByProvider(opts *bind.WatchOpts, sink chan<- *CanWorkOnCancelEscrowByProvider, dapp []common.Address, escrowId []*big.Int) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var escrowIdRule []interface{}
	for _, escrowIdItem := range escrowId {
		escrowIdRule = append(escrowIdRule, escrowIdItem)
	}

	logs, sub, err := _CanWork.contract.WatchLogs(opts, "OnCancelEscrowByProvider", dappRule, escrowIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkOnCancelEscrowByProvider)
				if err := _CanWork.contract.UnpackLog(event, "OnCancelEscrowByProvider", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkOnCancelJobByAdminIterator is returned from FilterOnCancelJobByAdmin and is used to iterate over the raw logs and unpacked data for OnCancelJobByAdmin events raised by the CanWork contract.
type CanWorkOnCancelJobByAdminIterator struct {
	Event *CanWorkOnCancelJobByAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkOnCancelJobByAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkOnCancelJobByAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkOnCancelJobByAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkOnCancelJobByAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkOnCancelJobByAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkOnCancelJobByAdmin represents a OnCancelJobByAdmin event raised by the CanWork contract.
type CanWorkOnCancelJobByAdmin struct {
	Dapp                    common.Address
	JobId                   [32]byte
	PayToProviderPercentage uint8
	Arbiter                 common.Address
	PayToArbiterPercentage  uint8
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterOnCancelJobByAdmin is a free log retrieval operation binding the contract event 0xb5147162f3f7e77567ea20823c3339ae369a07c96dafce09964879ed9ea17611.
//
// Solidity: e OnCancelJobByAdmin(dapp indexed address, jobId indexed bytes32, payToProviderPercentage uint8, arbiter indexed address, payToArbiterPercentage uint8)
func (_CanWork *CanWorkFilterer) FilterOnCancelJobByAdmin(opts *bind.FilterOpts, dapp []common.Address, jobId [][32]byte, arbiter []common.Address) (*CanWorkOnCancelJobByAdminIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var jobIdRule []interface{}
	for _, jobIdItem := range jobId {
		jobIdRule = append(jobIdRule, jobIdItem)
	}

	var arbiterRule []interface{}
	for _, arbiterItem := range arbiter {
		arbiterRule = append(arbiterRule, arbiterItem)
	}

	logs, sub, err := _CanWork.contract.FilterLogs(opts, "OnCancelJobByAdmin", dappRule, jobIdRule, arbiterRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkOnCancelJobByAdminIterator{contract: _CanWork.contract, event: "OnCancelJobByAdmin", logs: logs, sub: sub}, nil
}

// WatchOnCancelJobByAdmin is a free log subscription operation binding the contract event 0xb5147162f3f7e77567ea20823c3339ae369a07c96dafce09964879ed9ea17611.
//
// Solidity: e OnCancelJobByAdmin(dapp indexed address, jobId indexed bytes32, payToProviderPercentage uint8, arbiter indexed address, payToArbiterPercentage uint8)
func (_CanWork *CanWorkFilterer) WatchOnCancelJobByAdmin(opts *bind.WatchOpts, sink chan<- *CanWorkOnCancelJobByAdmin, dapp []common.Address, jobId [][32]byte, arbiter []common.Address) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var jobIdRule []interface{}
	for _, jobIdItem := range jobId {
		jobIdRule = append(jobIdRule, jobIdItem)
	}

	var arbiterRule []interface{}
	for _, arbiterItem := range arbiter {
		arbiterRule = append(arbiterRule, arbiterItem)
	}

	logs, sub, err := _CanWork.contract.WatchLogs(opts, "OnCancelJobByAdmin", dappRule, jobIdRule, arbiterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkOnCancelJobByAdmin)
				if err := _CanWork.contract.UnpackLog(event, "OnCancelJobByAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkOnCancelJobByProviderIterator is returned from FilterOnCancelJobByProvider and is used to iterate over the raw logs and unpacked data for OnCancelJobByProvider events raised by the CanWork contract.
type CanWorkOnCancelJobByProviderIterator struct {
	Event *CanWorkOnCancelJobByProvider // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkOnCancelJobByProviderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkOnCancelJobByProvider)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkOnCancelJobByProvider)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkOnCancelJobByProviderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkOnCancelJobByProviderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkOnCancelJobByProvider represents a OnCancelJobByProvider event raised by the CanWork contract.
type CanWorkOnCancelJobByProvider struct {
	Dapp  common.Address
	JobId [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterOnCancelJobByProvider is a free log retrieval operation binding the contract event 0x9deeb35dcae810f88ff11beec766eaa1b2e9f1ef7bcefbb8f2a3f91fdf98c426.
//
// Solidity: e OnCancelJobByProvider(dapp indexed address, jobId indexed bytes32)
func (_CanWork *CanWorkFilterer) FilterOnCancelJobByProvider(opts *bind.FilterOpts, dapp []common.Address, jobId [][32]byte) (*CanWorkOnCancelJobByProviderIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var jobIdRule []interface{}
	for _, jobIdItem := range jobId {
		jobIdRule = append(jobIdRule, jobIdItem)
	}

	logs, sub, err := _CanWork.contract.FilterLogs(opts, "OnCancelJobByProvider", dappRule, jobIdRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkOnCancelJobByProviderIterator{contract: _CanWork.contract, event: "OnCancelJobByProvider", logs: logs, sub: sub}, nil
}

// WatchOnCancelJobByProvider is a free log subscription operation binding the contract event 0x9deeb35dcae810f88ff11beec766eaa1b2e9f1ef7bcefbb8f2a3f91fdf98c426.
//
// Solidity: e OnCancelJobByProvider(dapp indexed address, jobId indexed bytes32)
func (_CanWork *CanWorkFilterer) WatchOnCancelJobByProvider(opts *bind.WatchOpts, sink chan<- *CanWorkOnCancelJobByProvider, dapp []common.Address, jobId [][32]byte) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var jobIdRule []interface{}
	for _, jobIdItem := range jobId {
		jobIdRule = append(jobIdRule, jobIdItem)
	}

	logs, sub, err := _CanWork.contract.WatchLogs(opts, "OnCancelJobByProvider", dappRule, jobIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkOnCancelJobByProvider)
				if err := _CanWork.contract.UnpackLog(event, "OnCancelJobByProvider", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkOnCompleteEscrowIterator is returned from FilterOnCompleteEscrow and is used to iterate over the raw logs and unpacked data for OnCompleteEscrow events raised by the CanWork contract.
type CanWorkOnCompleteEscrowIterator struct {
	Event *CanWorkOnCompleteEscrow // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkOnCompleteEscrowIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkOnCompleteEscrow)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkOnCompleteEscrow)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkOnCompleteEscrowIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkOnCompleteEscrowIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkOnCompleteEscrow represents a OnCompleteEscrow event raised by the CanWork contract.
type CanWorkOnCompleteEscrow struct {
	Dapp     common.Address
	EscrowId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOnCompleteEscrow is a free log retrieval operation binding the contract event 0x4bebfffc0dc0fb54ffd42c8fe2424e8fe0c482f089c4d0d6e6f1ea5d9e34248a.
//
// Solidity: e OnCompleteEscrow(dapp indexed address, escrowId indexed uint256)
func (_CanWork *CanWorkFilterer) FilterOnCompleteEscrow(opts *bind.FilterOpts, dapp []common.Address, escrowId []*big.Int) (*CanWorkOnCompleteEscrowIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var escrowIdRule []interface{}
	for _, escrowIdItem := range escrowId {
		escrowIdRule = append(escrowIdRule, escrowIdItem)
	}

	logs, sub, err := _CanWork.contract.FilterLogs(opts, "OnCompleteEscrow", dappRule, escrowIdRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkOnCompleteEscrowIterator{contract: _CanWork.contract, event: "OnCompleteEscrow", logs: logs, sub: sub}, nil
}

// WatchOnCompleteEscrow is a free log subscription operation binding the contract event 0x4bebfffc0dc0fb54ffd42c8fe2424e8fe0c482f089c4d0d6e6f1ea5d9e34248a.
//
// Solidity: e OnCompleteEscrow(dapp indexed address, escrowId indexed uint256)
func (_CanWork *CanWorkFilterer) WatchOnCompleteEscrow(opts *bind.WatchOpts, sink chan<- *CanWorkOnCompleteEscrow, dapp []common.Address, escrowId []*big.Int) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var escrowIdRule []interface{}
	for _, escrowIdItem := range escrowId {
		escrowIdRule = append(escrowIdRule, escrowIdItem)
	}

	logs, sub, err := _CanWork.contract.WatchLogs(opts, "OnCompleteEscrow", dappRule, escrowIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkOnCompleteEscrow)
				if err := _CanWork.contract.UnpackLog(event, "OnCompleteEscrow", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkOnCompleteJobIterator is returned from FilterOnCompleteJob and is used to iterate over the raw logs and unpacked data for OnCompleteJob events raised by the CanWork contract.
type CanWorkOnCompleteJobIterator struct {
	Event *CanWorkOnCompleteJob // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkOnCompleteJobIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkOnCompleteJob)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkOnCompleteJob)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkOnCompleteJobIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkOnCompleteJobIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkOnCompleteJob represents a OnCompleteJob event raised by the CanWork contract.
type CanWorkOnCompleteJob struct {
	Dapp  common.Address
	JobId [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterOnCompleteJob is a free log retrieval operation binding the contract event 0x5fa8e6f4fbdedc8f67f68ed5dd5a194353476578eb9231d8925543e55fec008a.
//
// Solidity: e OnCompleteJob(dapp indexed address, jobId indexed bytes32)
func (_CanWork *CanWorkFilterer) FilterOnCompleteJob(opts *bind.FilterOpts, dapp []common.Address, jobId [][32]byte) (*CanWorkOnCompleteJobIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var jobIdRule []interface{}
	for _, jobIdItem := range jobId {
		jobIdRule = append(jobIdRule, jobIdItem)
	}

	logs, sub, err := _CanWork.contract.FilterLogs(opts, "OnCompleteJob", dappRule, jobIdRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkOnCompleteJobIterator{contract: _CanWork.contract, event: "OnCompleteJob", logs: logs, sub: sub}, nil
}

// WatchOnCompleteJob is a free log subscription operation binding the contract event 0x5fa8e6f4fbdedc8f67f68ed5dd5a194353476578eb9231d8925543e55fec008a.
//
// Solidity: e OnCompleteJob(dapp indexed address, jobId indexed bytes32)
func (_CanWork *CanWorkFilterer) WatchOnCompleteJob(opts *bind.WatchOpts, sink chan<- *CanWorkOnCompleteJob, dapp []common.Address, jobId [][32]byte) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var jobIdRule []interface{}
	for _, jobIdItem := range jobId {
		jobIdRule = append(jobIdRule, jobIdItem)
	}

	logs, sub, err := _CanWork.contract.WatchLogs(opts, "OnCompleteJob", dappRule, jobIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkOnCompleteJob)
				if err := _CanWork.contract.UnpackLog(event, "OnCompleteJob", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkOnCreateEscrowIterator is returned from FilterOnCreateEscrow and is used to iterate over the raw logs and unpacked data for OnCreateEscrow events raised by the CanWork contract.
type CanWorkOnCreateEscrowIterator struct {
	Event *CanWorkOnCreateEscrow // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkOnCreateEscrowIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkOnCreateEscrow)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkOnCreateEscrow)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkOnCreateEscrowIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkOnCreateEscrowIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkOnCreateEscrow represents a OnCreateEscrow event raised by the CanWork contract.
type CanWorkOnCreateEscrow struct {
	Dapp      common.Address
	Client    common.Address
	Provider  common.Address
	Amount    *big.Int
	DaiAmount *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterOnCreateEscrow is a free log retrieval operation binding the contract event 0x2deff110fb90284ba1ebd12f5a2a449109b5327e5144dcf39bae0fa2fcfa7afb.
//
// Solidity: e OnCreateEscrow(dapp indexed address, client indexed address, provider indexed address, amount uint256, daiAmount uint256)
func (_CanWork *CanWorkFilterer) FilterOnCreateEscrow(opts *bind.FilterOpts, dapp []common.Address, client []common.Address, provider []common.Address) (*CanWorkOnCreateEscrowIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var clientRule []interface{}
	for _, clientItem := range client {
		clientRule = append(clientRule, clientItem)
	}
	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _CanWork.contract.FilterLogs(opts, "OnCreateEscrow", dappRule, clientRule, providerRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkOnCreateEscrowIterator{contract: _CanWork.contract, event: "OnCreateEscrow", logs: logs, sub: sub}, nil
}

// WatchOnCreateEscrow is a free log subscription operation binding the contract event 0x2deff110fb90284ba1ebd12f5a2a449109b5327e5144dcf39bae0fa2fcfa7afb.
//
// Solidity: e OnCreateEscrow(dapp indexed address, client indexed address, provider indexed address, amount uint256, daiAmount uint256)
func (_CanWork *CanWorkFilterer) WatchOnCreateEscrow(opts *bind.WatchOpts, sink chan<- *CanWorkOnCreateEscrow, dapp []common.Address, client []common.Address, provider []common.Address) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var clientRule []interface{}
	for _, clientItem := range client {
		clientRule = append(clientRule, clientItem)
	}
	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _CanWork.contract.WatchLogs(opts, "OnCreateEscrow", dappRule, clientRule, providerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkOnCreateEscrow)
				if err := _CanWork.contract.UnpackLog(event, "OnCreateEscrow", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkOnCreateJobIterator is returned from FilterOnCreateJob and is used to iterate over the raw logs and unpacked data for OnCreateJob events raised by the CanWork contract.
type CanWorkOnCreateJobIterator struct {
	Event *CanWorkOnCreateJob // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkOnCreateJobIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkOnCreateJob)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkOnCreateJob)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkOnCreateJobIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkOnCreateJobIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkOnCreateJob represents a OnCreateJob event raised by the CanWork contract.
type CanWorkOnCreateJob struct {
	Dapp       common.Address
	JobId      [32]byte
	Client     common.Address
	Provider   common.Address
	TotalCosts *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterOnCreateJob is a free log retrieval operation binding the contract event 0x06ec2805bab16df077e1bf66c474762caec30f56f6c01e4e673aa60b8dca979e.
//
// Solidity: e OnCreateJob(dapp indexed address, jobId indexed bytes32, client address, provider indexed address, totalCosts uint256)
func (_CanWork *CanWorkFilterer) FilterOnCreateJob(opts *bind.FilterOpts, dapp []common.Address, jobId [][32]byte, provider []common.Address) (*CanWorkOnCreateJobIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var jobIdRule []interface{}
	for _, jobIdItem := range jobId {
		jobIdRule = append(jobIdRule, jobIdItem)
	}

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _CanWork.contract.FilterLogs(opts, "OnCreateJob", dappRule, jobIdRule, providerRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkOnCreateJobIterator{contract: _CanWork.contract, event: "OnCreateJob", logs: logs, sub: sub}, nil
}

// WatchOnCreateJob is a free log subscription operation binding the contract event 0x06ec2805bab16df077e1bf66c474762caec30f56f6c01e4e673aa60b8dca979e.
//
// Solidity: e OnCreateJob(dapp indexed address, jobId indexed bytes32, client address, provider indexed address, totalCosts uint256)
func (_CanWork *CanWorkFilterer) WatchOnCreateJob(opts *bind.WatchOpts, sink chan<- *CanWorkOnCreateJob, dapp []common.Address, jobId [][32]byte, provider []common.Address) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var jobIdRule []interface{}
	for _, jobIdItem := range jobId {
		jobIdRule = append(jobIdRule, jobIdItem)
	}

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _CanWork.contract.WatchLogs(opts, "OnCreateJob", dappRule, jobIdRule, providerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkOnCreateJob)
				if err := _CanWork.contract.UnpackLog(event, "OnCreateJob", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkOnEmeregencyTransferIterator is returned from FilterOnEmeregencyTransfer and is used to iterate over the raw logs and unpacked data for OnEmeregencyTransfer events raised by the CanWork contract.
type CanWorkOnEmeregencyTransferIterator struct {
	Event *CanWorkOnEmeregencyTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkOnEmeregencyTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkOnEmeregencyTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkOnEmeregencyTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkOnEmeregencyTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkOnEmeregencyTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkOnEmeregencyTransfer represents a OnEmeregencyTransfer event raised by the CanWork contract.
type CanWorkOnEmeregencyTransfer struct {
	ToAddress common.Address
	Balance   *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterOnEmeregencyTransfer is a free log retrieval operation binding the contract event 0xd52f490db8aced6e82c33e39d01bca1886f5e9579c9e3347e8a89d60ad39bb09.
//
// Solidity: e OnEmeregencyTransfer(toAddress indexed address, balance uint256)
func (_CanWork *CanWorkFilterer) FilterOnEmeregencyTransfer(opts *bind.FilterOpts, toAddress []common.Address) (*CanWorkOnEmeregencyTransferIterator, error) {

	var toAddressRule []interface{}
	for _, toAddressItem := range toAddress {
		toAddressRule = append(toAddressRule, toAddressItem)
	}

	logs, sub, err := _CanWork.contract.FilterLogs(opts, "OnEmeregencyTransfer", toAddressRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkOnEmeregencyTransferIterator{contract: _CanWork.contract, event: "OnEmeregencyTransfer", logs: logs, sub: sub}, nil
}

// WatchOnEmeregencyTransfer is a free log subscription operation binding the contract event 0xd52f490db8aced6e82c33e39d01bca1886f5e9579c9e3347e8a89d60ad39bb09.
//
// Solidity: e OnEmeregencyTransfer(toAddress indexed address, balance uint256)
func (_CanWork *CanWorkFilterer) WatchOnEmeregencyTransfer(opts *bind.WatchOpts, sink chan<- *CanWorkOnEmeregencyTransfer, toAddress []common.Address) (event.Subscription, error) {

	var toAddressRule []interface{}
	for _, toAddressItem := range toAddress {
		toAddressRule = append(toAddressRule, toAddressItem)
	}

	logs, sub, err := _CanWork.contract.WatchLogs(opts, "OnEmeregencyTransfer", toAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkOnEmeregencyTransfer)
				if err := _CanWork.contract.UnpackLog(event, "OnEmeregencyTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkOnInitializeIterator is returned from FilterOnInitialize and is used to iterate over the raw logs and unpacked data for OnInitialize events raised by the CanWork contract.
type CanWorkOnInitializeIterator struct {
	Event *CanWorkOnInitialize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkOnInitializeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkOnInitialize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkOnInitialize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkOnInitializeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkOnInitializeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkOnInitialize represents a OnInitialize event raised by the CanWork contract.
type CanWorkOnInitialize struct {
	Token       common.Address
	DApp        common.Address
	PriceOracle common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterOnInitialize is a free log retrieval operation binding the contract event 0x92bd6b72cc9afdcca9b04e941a144617e9c12e1b5160a3fb40163fe4a786bff0.
//
// Solidity: e OnInitialize(token indexed address, dApp indexed address, priceOracle address)
func (_CanWork *CanWorkFilterer) FilterOnInitialize(opts *bind.FilterOpts, token []common.Address, dApp []common.Address) (*CanWorkOnInitializeIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var dAppRule []interface{}
	for _, dAppItem := range dApp {
		dAppRule = append(dAppRule, dAppItem)
	}

	logs, sub, err := _CanWork.contract.FilterLogs(opts, "OnInitialize", tokenRule, dAppRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkOnInitializeIterator{contract: _CanWork.contract, event: "OnInitialize", logs: logs, sub: sub}, nil
}

// WatchOnInitialize is a free log subscription operation binding the contract event 0x92bd6b72cc9afdcca9b04e941a144617e9c12e1b5160a3fb40163fe4a786bff0.
//
// Solidity: e OnInitialize(token indexed address, dApp indexed address, priceOracle address)
func (_CanWork *CanWorkFilterer) WatchOnInitialize(opts *bind.WatchOpts, sink chan<- *CanWorkOnInitialize, token []common.Address, dApp []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var dAppRule []interface{}
	for _, dAppItem := range dApp {
		dAppRule = append(dAppRule, dAppItem)
	}

	logs, sub, err := _CanWork.contract.WatchLogs(opts, "OnInitialize", tokenRule, dAppRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkOnInitialize)
				if err := _CanWork.contract.UnpackLog(event, "OnInitialize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkAdminABI is the input ABI used to generate the binding from.
const CanWorkAdminABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getSignersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"resetSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"addSig\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// CanWorkAdminBin is the compiled bytecode used for deploying new contracts.
const CanWorkAdminBin = `0x`

// DeployCanWorkAdmin deploys a new Ethereum contract, binding an instance of CanWorkAdmin to it.
func DeployCanWorkAdmin(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CanWorkAdmin, error) {
	parsed, err := abi.JSON(strings.NewReader(CanWorkAdminABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CanWorkAdminBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CanWorkAdmin{CanWorkAdminCaller: CanWorkAdminCaller{contract: contract}, CanWorkAdminTransactor: CanWorkAdminTransactor{contract: contract}, CanWorkAdminFilterer: CanWorkAdminFilterer{contract: contract}}, nil
}

// CanWorkAdmin is an auto generated Go binding around an Ethereum contract.
type CanWorkAdmin struct {
	CanWorkAdminCaller     // Read-only binding to the contract
	CanWorkAdminTransactor // Write-only binding to the contract
	CanWorkAdminFilterer   // Log filterer for contract events
}

// CanWorkAdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type CanWorkAdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CanWorkAdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CanWorkAdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CanWorkAdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CanWorkAdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CanWorkAdminSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CanWorkAdminSession struct {
	Contract     *CanWorkAdmin     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CanWorkAdminCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CanWorkAdminCallerSession struct {
	Contract *CanWorkAdminCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// CanWorkAdminTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CanWorkAdminTransactorSession struct {
	Contract     *CanWorkAdminTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// CanWorkAdminRaw is an auto generated low-level Go binding around an Ethereum contract.
type CanWorkAdminRaw struct {
	Contract *CanWorkAdmin // Generic contract binding to access the raw methods on
}

// CanWorkAdminCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CanWorkAdminCallerRaw struct {
	Contract *CanWorkAdminCaller // Generic read-only contract binding to access the raw methods on
}

// CanWorkAdminTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CanWorkAdminTransactorRaw struct {
	Contract *CanWorkAdminTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCanWorkAdmin creates a new instance of CanWorkAdmin, bound to a specific deployed contract.
func NewCanWorkAdmin(address common.Address, backend bind.ContractBackend) (*CanWorkAdmin, error) {
	contract, err := bindCanWorkAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CanWorkAdmin{CanWorkAdminCaller: CanWorkAdminCaller{contract: contract}, CanWorkAdminTransactor: CanWorkAdminTransactor{contract: contract}, CanWorkAdminFilterer: CanWorkAdminFilterer{contract: contract}}, nil
}

// NewCanWorkAdminCaller creates a new read-only instance of CanWorkAdmin, bound to a specific deployed contract.
func NewCanWorkAdminCaller(address common.Address, caller bind.ContractCaller) (*CanWorkAdminCaller, error) {
	contract, err := bindCanWorkAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CanWorkAdminCaller{contract: contract}, nil
}

// NewCanWorkAdminTransactor creates a new write-only instance of CanWorkAdmin, bound to a specific deployed contract.
func NewCanWorkAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*CanWorkAdminTransactor, error) {
	contract, err := bindCanWorkAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CanWorkAdminTransactor{contract: contract}, nil
}

// NewCanWorkAdminFilterer creates a new log filterer instance of CanWorkAdmin, bound to a specific deployed contract.
func NewCanWorkAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*CanWorkAdminFilterer, error) {
	contract, err := bindCanWorkAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CanWorkAdminFilterer{contract: contract}, nil
}

// bindCanWorkAdmin binds a generic wrapper to an already deployed contract.
func bindCanWorkAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CanWorkAdminABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CanWorkAdmin *CanWorkAdminRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CanWorkAdmin.Contract.CanWorkAdminCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CanWorkAdmin *CanWorkAdminRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CanWorkAdmin.Contract.CanWorkAdminTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CanWorkAdmin *CanWorkAdminRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CanWorkAdmin.Contract.CanWorkAdminTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CanWorkAdmin *CanWorkAdminCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CanWorkAdmin.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CanWorkAdmin *CanWorkAdminTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CanWorkAdmin.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CanWorkAdmin *CanWorkAdminTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CanWorkAdmin.Contract.contract.Transact(opts, method, params...)
}

// GetSigner is a free data retrieval call binding the contract method 0x4fa6caf6.
//
// Solidity: function getSigner(id bytes32, index uint256) constant returns(address, bool)
func (_CanWorkAdmin *CanWorkAdminCaller) GetSigner(opts *bind.CallOpts, id [32]byte, index *big.Int) (common.Address, bool, error) {
	var (
		ret0 = new(common.Address)
		ret1 = new(bool)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _CanWorkAdmin.contract.Call(opts, out, "getSigner", id, index)
	return *ret0, *ret1, err
}

// GetSigner is a free data retrieval call binding the contract method 0x4fa6caf6.
//
// Solidity: function getSigner(id bytes32, index uint256) constant returns(address, bool)
func (_CanWorkAdmin *CanWorkAdminSession) GetSigner(id [32]byte, index *big.Int) (common.Address, bool, error) {
	return _CanWorkAdmin.Contract.GetSigner(&_CanWorkAdmin.CallOpts, id, index)
}

// GetSigner is a free data retrieval call binding the contract method 0x4fa6caf6.
//
// Solidity: function getSigner(id bytes32, index uint256) constant returns(address, bool)
func (_CanWorkAdmin *CanWorkAdminCallerSession) GetSigner(id [32]byte, index *big.Int) (common.Address, bool, error) {
	return _CanWorkAdmin.Contract.GetSigner(&_CanWorkAdmin.CallOpts, id, index)
}

// GetSignersCount is a free data retrieval call binding the contract method 0x46aaf139.
//
// Solidity: function getSignersCount(id bytes32) constant returns(uint8)
func (_CanWorkAdmin *CanWorkAdminCaller) GetSignersCount(opts *bind.CallOpts, id [32]byte) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _CanWorkAdmin.contract.Call(opts, out, "getSignersCount", id)
	return *ret0, err
}

// GetSignersCount is a free data retrieval call binding the contract method 0x46aaf139.
//
// Solidity: function getSignersCount(id bytes32) constant returns(uint8)
func (_CanWorkAdmin *CanWorkAdminSession) GetSignersCount(id [32]byte) (uint8, error) {
	return _CanWorkAdmin.Contract.GetSignersCount(&_CanWorkAdmin.CallOpts, id)
}

// GetSignersCount is a free data retrieval call binding the contract method 0x46aaf139.
//
// Solidity: function getSignersCount(id bytes32) constant returns(uint8)
func (_CanWorkAdmin *CanWorkAdminCallerSession) GetSignersCount(id [32]byte) (uint8, error) {
	return _CanWorkAdmin.Contract.GetSignersCount(&_CanWorkAdmin.CallOpts, id)
}

// HasRole is a free data retrieval call binding the contract method 0x217fe6c6.
//
// Solidity: function hasRole(addr address, roleName string) constant returns(bool)
func (_CanWorkAdmin *CanWorkAdminCaller) HasRole(opts *bind.CallOpts, addr common.Address, roleName string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CanWorkAdmin.contract.Call(opts, out, "hasRole", addr, roleName)
	return *ret0, err
}

// HasRole is a free data retrieval call binding the contract method 0x217fe6c6.
//
// Solidity: function hasRole(addr address, roleName string) constant returns(bool)
func (_CanWorkAdmin *CanWorkAdminSession) HasRole(addr common.Address, roleName string) (bool, error) {
	return _CanWorkAdmin.Contract.HasRole(&_CanWorkAdmin.CallOpts, addr, roleName)
}

// HasRole is a free data retrieval call binding the contract method 0x217fe6c6.
//
// Solidity: function hasRole(addr address, roleName string) constant returns(bool)
func (_CanWorkAdmin *CanWorkAdminCallerSession) HasRole(addr common.Address, roleName string) (bool, error) {
	return _CanWorkAdmin.Contract.HasRole(&_CanWorkAdmin.CallOpts, addr, roleName)
}

// AddSig is a paid mutator transaction binding the contract method 0xe287adf4.
//
// Solidity: function addSig(signer address, id bytes32) returns(uint8)
func (_CanWorkAdmin *CanWorkAdminTransactor) AddSig(opts *bind.TransactOpts, signer common.Address, id [32]byte) (*types.Transaction, error) {
	return _CanWorkAdmin.contract.Transact(opts, "addSig", signer, id)
}

// AddSig is a paid mutator transaction binding the contract method 0xe287adf4.
//
// Solidity: function addSig(signer address, id bytes32) returns(uint8)
func (_CanWorkAdmin *CanWorkAdminSession) AddSig(signer common.Address, id [32]byte) (*types.Transaction, error) {
	return _CanWorkAdmin.Contract.AddSig(&_CanWorkAdmin.TransactOpts, signer, id)
}

// AddSig is a paid mutator transaction binding the contract method 0xe287adf4.
//
// Solidity: function addSig(signer address, id bytes32) returns(uint8)
func (_CanWorkAdmin *CanWorkAdminTransactorSession) AddSig(signer common.Address, id [32]byte) (*types.Transaction, error) {
	return _CanWorkAdmin.Contract.AddSig(&_CanWorkAdmin.TransactOpts, signer, id)
}

// ResetSignature is a paid mutator transaction binding the contract method 0x5969c0e1.
//
// Solidity: function resetSignature(id bytes32) returns(bool)
func (_CanWorkAdmin *CanWorkAdminTransactor) ResetSignature(opts *bind.TransactOpts, id [32]byte) (*types.Transaction, error) {
	return _CanWorkAdmin.contract.Transact(opts, "resetSignature", id)
}

// ResetSignature is a paid mutator transaction binding the contract method 0x5969c0e1.
//
// Solidity: function resetSignature(id bytes32) returns(bool)
func (_CanWorkAdmin *CanWorkAdminSession) ResetSignature(id [32]byte) (*types.Transaction, error) {
	return _CanWorkAdmin.Contract.ResetSignature(&_CanWorkAdmin.TransactOpts, id)
}

// ResetSignature is a paid mutator transaction binding the contract method 0x5969c0e1.
//
// Solidity: function resetSignature(id bytes32) returns(bool)
func (_CanWorkAdmin *CanWorkAdminTransactorSession) ResetSignature(id [32]byte) (*types.Transaction, error) {
	return _CanWorkAdmin.Contract.ResetSignature(&_CanWorkAdmin.TransactOpts, id)
}

// CanWorkJobABI is the input ABI used to generate the binding from.
const CanWorkJobABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"}],\"name\":\"cancelJobByProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_escrowId\",\"type\":\"uint256\"}],\"name\":\"getEscrow\",\"outputs\":[{\"name\":\"client\",\"type\":\"address\"},{\"name\":\"provider\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"totalValueDai\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"closedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"updatePriceOracleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"}],\"name\":\"completeJob\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"name\":\"_payToClientPercentage\",\"type\":\"uint8\"},{\"name\":\"_payToProviderPercentage\",\"type\":\"uint8\"},{\"name\":\"_arbiter\",\"type\":\"address\"},{\"name\":\"_payToArbiterPercentage\",\"type\":\"uint8\"}],\"name\":\"cancelJobByAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"}],\"name\":\"getJobPayments\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"valueInDai\",\"type\":\"uint256\"},{\"name\":\"payoutAmount\",\"type\":\"uint256\"},{\"name\":\"paidToDappAmount\",\"type\":\"uint256\"},{\"name\":\"paidToProviderAmount\",\"type\":\"uint256\"},{\"name\":\"paidToClientAmount\",\"type\":\"uint256\"},{\"name\":\"paidToArbiterAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"migrationId\",\"type\":\"string\"}],\"name\":\"isMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_provider\",\"type\":\"address\"},{\"name\":\"_totalCosts\",\"type\":\"uint256\"}],\"name\":\"createJob\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_jobId\",\"type\":\"bytes32\"}],\"name\":\"getJob\",\"outputs\":[{\"name\":\"client\",\"type\":\"address\"},{\"name\":\"provider\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"valueInDai\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"closedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_canworkAdmin\",\"type\":\"address\"},{\"name\":\"_dApp\",\"type\":\"address\"},{\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_escrowId\",\"type\":\"uint256\"}],\"name\":\"getEscrowPayments\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"totalValueDai\",\"type\":\"uint256\"},{\"name\":\"payoutAmount\",\"type\":\"uint256\"},{\"name\":\"paidToDappAmount\",\"type\":\"uint256\"},{\"name\":\"paidToProviderAmount\",\"type\":\"uint256\"},{\"name\":\"paidToClientAmount\",\"type\":\"uint256\"},{\"name\":\"paidToArbiterAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"jobId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalCosts\",\"type\":\"uint256\"}],\"name\":\"OnCreateJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"jobId\",\"type\":\"bytes32\"}],\"name\":\"OnCompleteJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"jobId\",\"type\":\"bytes32\"}],\"name\":\"OnCancelJobByProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"jobId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"payToProviderPercentage\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"arbiter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payToArbiterPercentage\",\"type\":\"uint8\"}],\"name\":\"OnCancelJobByAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"dApp\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"priceOracle\",\"type\":\"address\"}],\"name\":\"OnInitialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"OnCreateEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"escrowId\",\"type\":\"uint256\"}],\"name\":\"OnCompleteEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"escrowId\",\"type\":\"uint256\"}],\"name\":\"OnCancelEscrowByProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"escrowId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payToProviderAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"arbiter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payToArbiterAmount\",\"type\":\"uint256\"}],\"name\":\"OnCancelEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"migrationId\",\"type\":\"string\"}],\"name\":\"Migrated\",\"type\":\"event\"}]"

// CanWorkJobBin is the compiled bytecode used for deploying new contracts.
const CanWorkJobBin = ``

// DeployCanWorkJob deploys a new Ethereum contract, binding an instance of CanWorkJob to it.
func DeployCanWorkJob(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CanWorkJob, error) {
	parsed, err := abi.JSON(strings.NewReader(CanWorkJobABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CanWorkJobBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CanWorkJob{CanWorkJobCaller: CanWorkJobCaller{contract: contract}, CanWorkJobTransactor: CanWorkJobTransactor{contract: contract}, CanWorkJobFilterer: CanWorkJobFilterer{contract: contract}}, nil
}

// CanWorkJob is an auto generated Go binding around an Ethereum contract.
type CanWorkJob struct {
	CanWorkJobCaller     // Read-only binding to the contract
	CanWorkJobTransactor // Write-only binding to the contract
	CanWorkJobFilterer   // Log filterer for contract events
}

// CanWorkJobCaller is an auto generated read-only Go binding around an Ethereum contract.
type CanWorkJobCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CanWorkJobTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CanWorkJobTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CanWorkJobFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CanWorkJobFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CanWorkJobSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CanWorkJobSession struct {
	Contract     *CanWorkJob       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CanWorkJobCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CanWorkJobCallerSession struct {
	Contract *CanWorkJobCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// CanWorkJobTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CanWorkJobTransactorSession struct {
	Contract     *CanWorkJobTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// CanWorkJobRaw is an auto generated low-level Go binding around an Ethereum contract.
type CanWorkJobRaw struct {
	Contract *CanWorkJob // Generic contract binding to access the raw methods on
}

// CanWorkJobCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CanWorkJobCallerRaw struct {
	Contract *CanWorkJobCaller // Generic read-only contract binding to access the raw methods on
}

// CanWorkJobTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CanWorkJobTransactorRaw struct {
	Contract *CanWorkJobTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCanWorkJob creates a new instance of CanWorkJob, bound to a specific deployed contract.
func NewCanWorkJob(address common.Address, backend bind.ContractBackend) (*CanWorkJob, error) {
	contract, err := bindCanWorkJob(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CanWorkJob{CanWorkJobCaller: CanWorkJobCaller{contract: contract}, CanWorkJobTransactor: CanWorkJobTransactor{contract: contract}, CanWorkJobFilterer: CanWorkJobFilterer{contract: contract}}, nil
}

// NewCanWorkJobCaller creates a new read-only instance of CanWorkJob, bound to a specific deployed contract.
func NewCanWorkJobCaller(address common.Address, caller bind.ContractCaller) (*CanWorkJobCaller, error) {
	contract, err := bindCanWorkJob(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CanWorkJobCaller{contract: contract}, nil
}

// NewCanWorkJobTransactor creates a new write-only instance of CanWorkJob, bound to a specific deployed contract.
func NewCanWorkJobTransactor(address common.Address, transactor bind.ContractTransactor) (*CanWorkJobTransactor, error) {
	contract, err := bindCanWorkJob(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CanWorkJobTransactor{contract: contract}, nil
}

// NewCanWorkJobFilterer creates a new log filterer instance of CanWorkJob, bound to a specific deployed contract.
func NewCanWorkJobFilterer(address common.Address, filterer bind.ContractFilterer) (*CanWorkJobFilterer, error) {
	contract, err := bindCanWorkJob(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CanWorkJobFilterer{contract: contract}, nil
}

// bindCanWorkJob binds a generic wrapper to an already deployed contract.
func bindCanWorkJob(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CanWorkJobABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CanWorkJob *CanWorkJobRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CanWorkJob.Contract.CanWorkJobCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CanWorkJob *CanWorkJobRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CanWorkJob.Contract.CanWorkJobTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CanWorkJob *CanWorkJobRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CanWorkJob.Contract.CanWorkJobTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CanWorkJob *CanWorkJobCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CanWorkJob.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CanWorkJob *CanWorkJobTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CanWorkJob.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CanWorkJob *CanWorkJobTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CanWorkJob.Contract.contract.Transact(opts, method, params...)
}

// ROLEADMIN is a free data retrieval call binding the contract method 0xd391014b.
//
// Solidity: function ROLE_ADMIN() constant returns(string)
func (_CanWorkJob *CanWorkJobCaller) ROLEADMIN(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _CanWorkJob.contract.Call(opts, out, "ROLE_ADMIN")
	return *ret0, err
}

// ROLEADMIN is a free data retrieval call binding the contract method 0xd391014b.
//
// Solidity: function ROLE_ADMIN() constant returns(string)
func (_CanWorkJob *CanWorkJobSession) ROLEADMIN() (string, error) {
	return _CanWorkJob.Contract.ROLEADMIN(&_CanWorkJob.CallOpts)
}

// ROLEADMIN is a free data retrieval call binding the contract method 0xd391014b.
//
// Solidity: function ROLE_ADMIN() constant returns(string)
func (_CanWorkJob *CanWorkJobCallerSession) ROLEADMIN() (string, error) {
	return _CanWorkJob.Contract.ROLEADMIN(&_CanWorkJob.CallOpts)
}

// ROLEOWNER is a free data retrieval call binding the contract method 0x8ad682af.
//
// Solidity: function ROLE_OWNER() constant returns(string)
func (_CanWorkJob *CanWorkJobCaller) ROLEOWNER(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _CanWorkJob.contract.Call(opts, out, "ROLE_OWNER")
	return *ret0, err
}

// ROLEOWNER is a free data retrieval call binding the contract method 0x8ad682af.
//
// Solidity: function ROLE_OWNER() constant returns(string)
func (_CanWorkJob *CanWorkJobSession) ROLEOWNER() (string, error) {
	return _CanWorkJob.Contract.ROLEOWNER(&_CanWorkJob.CallOpts)
}

// ROLEOWNER is a free data retrieval call binding the contract method 0x8ad682af.
//
// Solidity: function ROLE_OWNER() constant returns(string)
func (_CanWorkJob *CanWorkJobCallerSession) ROLEOWNER() (string, error) {
	return _CanWorkJob.Contract.ROLEOWNER(&_CanWorkJob.CallOpts)
}

// GetEscrow is a free data retrieval call binding the contract method 0x7d19e596.
//
// Solidity: function getEscrow(_escrowId uint256) constant returns(client address, provider address, amount uint256, totalValueDai uint256, status uint8, createdAt uint256, closedAt uint256)
func (_CanWorkJob *CanWorkJobCaller) GetEscrow(opts *bind.CallOpts, _escrowId *big.Int) (struct {
	Client        common.Address
	Provider      common.Address
	Amount        *big.Int
	TotalValueDai *big.Int
	Status        uint8
	CreatedAt     *big.Int
	ClosedAt      *big.Int
}, error) {
	ret := new(struct {
		Client        common.Address
		Provider      common.Address
		Amount        *big.Int
		TotalValueDai *big.Int
		Status        uint8
		CreatedAt     *big.Int
		ClosedAt      *big.Int
	})
	out := ret
	err := _CanWorkJob.contract.Call(opts, out, "getEscrow", _escrowId)
	return *ret, err
}

// GetEscrow is a free data retrieval call binding the contract method 0x7d19e596.
//
// Solidity: function getEscrow(_escrowId uint256) constant returns(client address, provider address, amount uint256, totalValueDai uint256, status uint8, createdAt uint256, closedAt uint256)
func (_CanWorkJob *CanWorkJobSession) GetEscrow(_escrowId *big.Int) (struct {
	Client        common.Address
	Provider      common.Address
	Amount        *big.Int
	TotalValueDai *big.Int
	Status        uint8
	CreatedAt     *big.Int
	ClosedAt      *big.Int
}, error) {
	return _CanWorkJob.Contract.GetEscrow(&_CanWorkJob.CallOpts, _escrowId)
}

// GetEscrow is a free data retrieval call binding the contract method 0x7d19e596.
//
// Solidity: function getEscrow(_escrowId uint256) constant returns(client address, provider address, amount uint256, totalValueDai uint256, status uint8, createdAt uint256, closedAt uint256)
func (_CanWorkJob *CanWorkJobCallerSession) GetEscrow(_escrowId *big.Int) (struct {
	Client        common.Address
	Provider      common.Address
	Amount        *big.Int
	TotalValueDai *big.Int
	Status        uint8
	CreatedAt     *big.Int
	ClosedAt      *big.Int
}, error) {
	return _CanWorkJob.Contract.GetEscrow(&_CanWorkJob.CallOpts, _escrowId)
}

// GetEscrowPayments is a free data retrieval call binding the contract method 0xfd232b59.
//
// Solidity: function getEscrowPayments(_escrowId uint256) constant returns(amount uint256, totalValueDai uint256, payoutAmount uint256, paidToDappAmount uint256, paidToProviderAmount uint256, paidToClientAmount uint256, paidToArbiterAmount uint256)
func (_CanWorkJob *CanWorkJobCaller) GetEscrowPayments(opts *bind.CallOpts, _escrowId *big.Int) (struct {
	Amount               *big.Int
	TotalValueDai        *big.Int
	PayoutAmount         *big.Int
	PaidToDappAmount     *big.Int
	PaidToProviderAmount *big.Int
	PaidToClientAmount   *big.Int
	PaidToArbiterAmount  *big.Int
}, error) {
	ret := new(struct {
		Amount               *big.Int
		TotalValueDai        *big.Int
		PayoutAmount         *big.Int
		PaidToDappAmount     *big.Int
		PaidToProviderAmount *big.Int
		PaidToClientAmount   *big.Int
		PaidToArbiterAmount  *big.Int
	})
	out := ret
	err := _CanWorkJob.contract.Call(opts, out, "getEscrowPayments", _escrowId)
	return *ret, err
}

// GetEscrowPayments is a free data retrieval call binding the contract method 0xfd232b59.
//
// Solidity: function getEscrowPayments(_escrowId uint256) constant returns(amount uint256, totalValueDai uint256, payoutAmount uint256, paidToDappAmount uint256, paidToProviderAmount uint256, paidToClientAmount uint256, paidToArbiterAmount uint256)
func (_CanWorkJob *CanWorkJobSession) GetEscrowPayments(_escrowId *big.Int) (struct {
	Amount               *big.Int
	TotalValueDai        *big.Int
	PayoutAmount         *big.Int
	PaidToDappAmount     *big.Int
	PaidToProviderAmount *big.Int
	PaidToClientAmount   *big.Int
	PaidToArbiterAmount  *big.Int
}, error) {
	return _CanWorkJob.Contract.GetEscrowPayments(&_CanWorkJob.CallOpts, _escrowId)
}

// GetEscrowPayments is a free data retrieval call binding the contract method 0xfd232b59.
//
// Solidity: function getEscrowPayments(_escrowId uint256) constant returns(amount uint256, totalValueDai uint256, payoutAmount uint256, paidToDappAmount uint256, paidToProviderAmount uint256, paidToClientAmount uint256, paidToArbiterAmount uint256)
func (_CanWorkJob *CanWorkJobCallerSession) GetEscrowPayments(_escrowId *big.Int) (struct {
	Amount               *big.Int
	TotalValueDai        *big.Int
	PayoutAmount         *big.Int
	PaidToDappAmount     *big.Int
	PaidToProviderAmount *big.Int
	PaidToClientAmount   *big.Int
	PaidToArbiterAmount  *big.Int
}, error) {
	return _CanWorkJob.Contract.GetEscrowPayments(&_CanWorkJob.CallOpts, _escrowId)
}

// GetJob is a free data retrieval call binding the contract method 0xf729cf0d.
//
// Solidity: function getJob(_jobId bytes32) constant returns(client address, provider address, amount uint256, valueInDai uint256, status uint8, createdAt uint256, closedAt uint256)
func (_CanWorkJob *CanWorkJobCaller) GetJob(opts *bind.CallOpts, _jobId [32]byte) (struct {
	Client     common.Address
	Provider   common.Address
	Amount     *big.Int
	ValueInDai *big.Int
	Status     uint8
	CreatedAt  *big.Int
	ClosedAt   *big.Int
}, error) {
	ret := new(struct {
		Client     common.Address
		Provider   common.Address
		Amount     *big.Int
		ValueInDai *big.Int
		Status     uint8
		CreatedAt  *big.Int
		ClosedAt   *big.Int
	})
	out := ret
	err := _CanWorkJob.contract.Call(opts, out, "getJob", _jobId)
	return *ret, err
}

// GetJob is a free data retrieval call binding the contract method 0xf729cf0d.
//
// Solidity: function getJob(_jobId bytes32) constant returns(client address, provider address, amount uint256, valueInDai uint256, status uint8, createdAt uint256, closedAt uint256)
func (_CanWorkJob *CanWorkJobSession) GetJob(_jobId [32]byte) (struct {
	Client     common.Address
	Provider   common.Address
	Amount     *big.Int
	ValueInDai *big.Int
	Status     uint8
	CreatedAt  *big.Int
	ClosedAt   *big.Int
}, error) {
	return _CanWorkJob.Contract.GetJob(&_CanWorkJob.CallOpts, _jobId)
}

// GetJob is a free data retrieval call binding the contract method 0xf729cf0d.
//
// Solidity: function getJob(_jobId bytes32) constant returns(client address, provider address, amount uint256, valueInDai uint256, status uint8, createdAt uint256, closedAt uint256)
func (_CanWorkJob *CanWorkJobCallerSession) GetJob(_jobId [32]byte) (struct {
	Client     common.Address
	Provider   common.Address
	Amount     *big.Int
	ValueInDai *big.Int
	Status     uint8
	CreatedAt  *big.Int
	ClosedAt   *big.Int
}, error) {
	return _CanWorkJob.Contract.GetJob(&_CanWorkJob.CallOpts, _jobId)
}

// GetJobPayments is a free data retrieval call binding the contract method 0xafcfad6e.
//
// Solidity: function getJobPayments(_jobId bytes32) constant returns(amount uint256, valueInDai uint256, payoutAmount uint256, paidToDappAmount uint256, paidToProviderAmount uint256, paidToClientAmount uint256, paidToArbiterAmount uint256)
func (_CanWorkJob *CanWorkJobCaller) GetJobPayments(opts *bind.CallOpts, _jobId [32]byte) (struct {
	Amount               *big.Int
	ValueInDai           *big.Int
	PayoutAmount         *big.Int
	PaidToDappAmount     *big.Int
	PaidToProviderAmount *big.Int
	PaidToClientAmount   *big.Int
	PaidToArbiterAmount  *big.Int
}, error) {
	ret := new(struct {
		Amount               *big.Int
		ValueInDai           *big.Int
		PayoutAmount         *big.Int
		PaidToDappAmount     *big.Int
		PaidToProviderAmount *big.Int
		PaidToClientAmount   *big.Int
		PaidToArbiterAmount  *big.Int
	})
	out := ret
	err := _CanWorkJob.contract.Call(opts, out, "getJobPayments", _jobId)
	return *ret, err
}

// GetJobPayments is a free data retrieval call binding the contract method 0xafcfad6e.
//
// Solidity: function getJobPayments(_jobId bytes32) constant returns(amount uint256, valueInDai uint256, payoutAmount uint256, paidToDappAmount uint256, paidToProviderAmount uint256, paidToClientAmount uint256, paidToArbiterAmount uint256)
func (_CanWorkJob *CanWorkJobSession) GetJobPayments(_jobId [32]byte) (struct {
	Amount               *big.Int
	ValueInDai           *big.Int
	PayoutAmount         *big.Int
	PaidToDappAmount     *big.Int
	PaidToProviderAmount *big.Int
	PaidToClientAmount   *big.Int
	PaidToArbiterAmount  *big.Int
}, error) {
	return _CanWorkJob.Contract.GetJobPayments(&_CanWorkJob.CallOpts, _jobId)
}

// GetJobPayments is a free data retrieval call binding the contract method 0xafcfad6e.
//
// Solidity: function getJobPayments(_jobId bytes32) constant returns(amount uint256, valueInDai uint256, payoutAmount uint256, paidToDappAmount uint256, paidToProviderAmount uint256, paidToClientAmount uint256, paidToArbiterAmount uint256)
func (_CanWorkJob *CanWorkJobCallerSession) GetJobPayments(_jobId [32]byte) (struct {
	Amount               *big.Int
	ValueInDai           *big.Int
	PayoutAmount         *big.Int
	PaidToDappAmount     *big.Int
	PaidToProviderAmount *big.Int
	PaidToClientAmount   *big.Int
	PaidToArbiterAmount  *big.Int
}, error) {
	return _CanWorkJob.Contract.GetJobPayments(&_CanWorkJob.CallOpts, _jobId)
}

// IsMigrated is a free data retrieval call binding the contract method 0xc0bac1a8.
//
// Solidity: function isMigrated(contractName string, migrationId string) constant returns(bool)
func (_CanWorkJob *CanWorkJobCaller) IsMigrated(opts *bind.CallOpts, contractName string, migrationId string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CanWorkJob.contract.Call(opts, out, "isMigrated", contractName, migrationId)
	return *ret0, err
}

// IsMigrated is a free data retrieval call binding the contract method 0xc0bac1a8.
//
// Solidity: function isMigrated(contractName string, migrationId string) constant returns(bool)
func (_CanWorkJob *CanWorkJobSession) IsMigrated(contractName string, migrationId string) (bool, error) {
	return _CanWorkJob.Contract.IsMigrated(&_CanWorkJob.CallOpts, contractName, migrationId)
}

// IsMigrated is a free data retrieval call binding the contract method 0xc0bac1a8.
//
// Solidity: function isMigrated(contractName string, migrationId string) constant returns(bool)
func (_CanWorkJob *CanWorkJobCallerSession) IsMigrated(contractName string, migrationId string) (bool, error) {
	return _CanWorkJob.Contract.IsMigrated(&_CanWorkJob.CallOpts, contractName, migrationId)
}

// PriceOracle is a free data retrieval call binding the contract method 0x2630c12f.
//
// Solidity: function priceOracle() constant returns(address)
func (_CanWorkJob *CanWorkJobCaller) PriceOracle(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CanWorkJob.contract.Call(opts, out, "priceOracle")
	return *ret0, err
}

// PriceOracle is a free data retrieval call binding the contract method 0x2630c12f.
//
// Solidity: function priceOracle() constant returns(address)
func (_CanWorkJob *CanWorkJobSession) PriceOracle() (common.Address, error) {
	return _CanWorkJob.Contract.PriceOracle(&_CanWorkJob.CallOpts)
}

// PriceOracle is a free data retrieval call binding the contract method 0x2630c12f.
//
// Solidity: function priceOracle() constant returns(address)
func (_CanWorkJob *CanWorkJobCallerSession) PriceOracle() (common.Address, error) {
	return _CanWorkJob.Contract.PriceOracle(&_CanWorkJob.CallOpts)
}

// CancelJobByAdmin is a paid mutator transaction binding the contract method 0xa52c7a4f.
//
// Solidity: function cancelJobByAdmin(_jobId bytes32, _payToClientPercentage uint8, _payToProviderPercentage uint8, _arbiter address, _payToArbiterPercentage uint8) returns(bool)
func (_CanWorkJob *CanWorkJobTransactor) CancelJobByAdmin(opts *bind.TransactOpts, _jobId [32]byte, _payToClientPercentage uint8, _payToProviderPercentage uint8, _arbiter common.Address, _payToArbiterPercentage uint8) (*types.Transaction, error) {
	return _CanWorkJob.contract.Transact(opts, "cancelJobByAdmin", _jobId, _payToClientPercentage, _payToProviderPercentage, _arbiter, _payToArbiterPercentage)
}

// CancelJobByAdmin is a paid mutator transaction binding the contract method 0xa52c7a4f.
//
// Solidity: function cancelJobByAdmin(_jobId bytes32, _payToClientPercentage uint8, _payToProviderPercentage uint8, _arbiter address, _payToArbiterPercentage uint8) returns(bool)
func (_CanWorkJob *CanWorkJobSession) CancelJobByAdmin(_jobId [32]byte, _payToClientPercentage uint8, _payToProviderPercentage uint8, _arbiter common.Address, _payToArbiterPercentage uint8) (*types.Transaction, error) {
	return _CanWorkJob.Contract.CancelJobByAdmin(&_CanWorkJob.TransactOpts, _jobId, _payToClientPercentage, _payToProviderPercentage, _arbiter, _payToArbiterPercentage)
}

// CancelJobByAdmin is a paid mutator transaction binding the contract method 0xa52c7a4f.
//
// Solidity: function cancelJobByAdmin(_jobId bytes32, _payToClientPercentage uint8, _payToProviderPercentage uint8, _arbiter address, _payToArbiterPercentage uint8) returns(bool)
func (_CanWorkJob *CanWorkJobTransactorSession) CancelJobByAdmin(_jobId [32]byte, _payToClientPercentage uint8, _payToProviderPercentage uint8, _arbiter common.Address, _payToArbiterPercentage uint8) (*types.Transaction, error) {
	return _CanWorkJob.Contract.CancelJobByAdmin(&_CanWorkJob.TransactOpts, _jobId, _payToClientPercentage, _payToProviderPercentage, _arbiter, _payToArbiterPercentage)
}

// CancelJobByProvider is a paid mutator transaction binding the contract method 0x6e6bfca0.
//
// Solidity: function cancelJobByProvider(_jobId bytes32) returns(bool)
func (_CanWorkJob *CanWorkJobTransactor) CancelJobByProvider(opts *bind.TransactOpts, _jobId [32]byte) (*types.Transaction, error) {
	return _CanWorkJob.contract.Transact(opts, "cancelJobByProvider", _jobId)
}

// CancelJobByProvider is a paid mutator transaction binding the contract method 0x6e6bfca0.
//
// Solidity: function cancelJobByProvider(_jobId bytes32) returns(bool)
func (_CanWorkJob *CanWorkJobSession) CancelJobByProvider(_jobId [32]byte) (*types.Transaction, error) {
	return _CanWorkJob.Contract.CancelJobByProvider(&_CanWorkJob.TransactOpts, _jobId)
}

// CancelJobByProvider is a paid mutator transaction binding the contract method 0x6e6bfca0.
//
// Solidity: function cancelJobByProvider(_jobId bytes32) returns(bool)
func (_CanWorkJob *CanWorkJobTransactorSession) CancelJobByProvider(_jobId [32]byte) (*types.Transaction, error) {
	return _CanWorkJob.Contract.CancelJobByProvider(&_CanWorkJob.TransactOpts, _jobId)
}

// CompleteJob is a paid mutator transaction binding the contract method 0x991e0139.
//
// Solidity: function completeJob(_jobId bytes32) returns(bool)
func (_CanWorkJob *CanWorkJobTransactor) CompleteJob(opts *bind.TransactOpts, _jobId [32]byte) (*types.Transaction, error) {
	return _CanWorkJob.contract.Transact(opts, "completeJob", _jobId)
}

// CompleteJob is a paid mutator transaction binding the contract method 0x991e0139.
//
// Solidity: function completeJob(_jobId bytes32) returns(bool)
func (_CanWorkJob *CanWorkJobSession) CompleteJob(_jobId [32]byte) (*types.Transaction, error) {
	return _CanWorkJob.Contract.CompleteJob(&_CanWorkJob.TransactOpts, _jobId)
}

// CompleteJob is a paid mutator transaction binding the contract method 0x991e0139.
//
// Solidity: function completeJob(_jobId bytes32) returns(bool)
func (_CanWorkJob *CanWorkJobTransactorSession) CompleteJob(_jobId [32]byte) (*types.Transaction, error) {
	return _CanWorkJob.Contract.CompleteJob(&_CanWorkJob.TransactOpts, _jobId)
}

// CreateJob is a paid mutator transaction binding the contract method 0xe7acaa1e.
//
// Solidity: function createJob(_jobId bytes32, _client address, _provider address, _totalCosts uint256) returns(bool)
func (_CanWorkJob *CanWorkJobTransactor) CreateJob(opts *bind.TransactOpts, _jobId [32]byte, _client common.Address, _provider common.Address, _totalCosts *big.Int) (*types.Transaction, error) {
	return _CanWorkJob.contract.Transact(opts, "createJob", _jobId, _client, _provider, _totalCosts)
}

// CreateJob is a paid mutator transaction binding the contract method 0xe7acaa1e.
//
// Solidity: function createJob(_jobId bytes32, _client address, _provider address, _totalCosts uint256) returns(bool)
func (_CanWorkJob *CanWorkJobSession) CreateJob(_jobId [32]byte, _client common.Address, _provider common.Address, _totalCosts *big.Int) (*types.Transaction, error) {
	return _CanWorkJob.Contract.CreateJob(&_CanWorkJob.TransactOpts, _jobId, _client, _provider, _totalCosts)
}

// CreateJob is a paid mutator transaction binding the contract method 0xe7acaa1e.
//
// Solidity: function createJob(_jobId bytes32, _client address, _provider address, _totalCosts uint256) returns(bool)
func (_CanWorkJob *CanWorkJobTransactorSession) CreateJob(_jobId [32]byte, _client common.Address, _provider common.Address, _totalCosts *big.Int) (*types.Transaction, error) {
	return _CanWorkJob.Contract.CreateJob(&_CanWorkJob.TransactOpts, _jobId, _client, _provider, _totalCosts)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(_token address, _canworkAdmin address, _dApp address, _priceOracle address) returns()
func (_CanWorkJob *CanWorkJobTransactor) Initialize(opts *bind.TransactOpts, _token common.Address, _canworkAdmin common.Address, _dApp common.Address, _priceOracle common.Address) (*types.Transaction, error) {
	return _CanWorkJob.contract.Transact(opts, "initialize", _token, _canworkAdmin, _dApp, _priceOracle)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(_token address, _canworkAdmin address, _dApp address, _priceOracle address) returns()
func (_CanWorkJob *CanWorkJobSession) Initialize(_token common.Address, _canworkAdmin common.Address, _dApp common.Address, _priceOracle common.Address) (*types.Transaction, error) {
	return _CanWorkJob.Contract.Initialize(&_CanWorkJob.TransactOpts, _token, _canworkAdmin, _dApp, _priceOracle)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(_token address, _canworkAdmin address, _dApp address, _priceOracle address) returns()
func (_CanWorkJob *CanWorkJobTransactorSession) Initialize(_token common.Address, _canworkAdmin common.Address, _dApp common.Address, _priceOracle common.Address) (*types.Transaction, error) {
	return _CanWorkJob.Contract.Initialize(&_CanWorkJob.TransactOpts, _token, _canworkAdmin, _dApp, _priceOracle)
}

// UpdatePriceOracleAddress is a paid mutator transaction binding the contract method 0x86d1e02b.
//
// Solidity: function updatePriceOracleAddress(_oracle address) returns()
func (_CanWorkJob *CanWorkJobTransactor) UpdatePriceOracleAddress(opts *bind.TransactOpts, _oracle common.Address) (*types.Transaction, error) {
	return _CanWorkJob.contract.Transact(opts, "updatePriceOracleAddress", _oracle)
}

// UpdatePriceOracleAddress is a paid mutator transaction binding the contract method 0x86d1e02b.
//
// Solidity: function updatePriceOracleAddress(_oracle address) returns()
func (_CanWorkJob *CanWorkJobSession) UpdatePriceOracleAddress(_oracle common.Address) (*types.Transaction, error) {
	return _CanWorkJob.Contract.UpdatePriceOracleAddress(&_CanWorkJob.TransactOpts, _oracle)
}

// UpdatePriceOracleAddress is a paid mutator transaction binding the contract method 0x86d1e02b.
//
// Solidity: function updatePriceOracleAddress(_oracle address) returns()
func (_CanWorkJob *CanWorkJobTransactorSession) UpdatePriceOracleAddress(_oracle common.Address) (*types.Transaction, error) {
	return _CanWorkJob.Contract.UpdatePriceOracleAddress(&_CanWorkJob.TransactOpts, _oracle)
}

// CanWorkJobMigratedIterator is returned from FilterMigrated and is used to iterate over the raw logs and unpacked data for Migrated events raised by the CanWorkJob contract.
type CanWorkJobMigratedIterator struct {
	Event *CanWorkJobMigrated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkJobMigratedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkJobMigrated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkJobMigrated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkJobMigratedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkJobMigratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkJobMigrated represents a Migrated event raised by the CanWorkJob contract.
type CanWorkJobMigrated struct {
	ContractName string
	MigrationId  string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterMigrated is a free log retrieval operation binding the contract event 0xdd117a11c22118c9dee4b5a67ce578bc44529dce21ee0ccc439588fbb9fb4ea3.
//
// Solidity: e Migrated(contractName string, migrationId string)
func (_CanWorkJob *CanWorkJobFilterer) FilterMigrated(opts *bind.FilterOpts) (*CanWorkJobMigratedIterator, error) {

	logs, sub, err := _CanWorkJob.contract.FilterLogs(opts, "Migrated")
	if err != nil {
		return nil, err
	}
	return &CanWorkJobMigratedIterator{contract: _CanWorkJob.contract, event: "Migrated", logs: logs, sub: sub}, nil
}

// WatchMigrated is a free log subscription operation binding the contract event 0xdd117a11c22118c9dee4b5a67ce578bc44529dce21ee0ccc439588fbb9fb4ea3.
//
// Solidity: e Migrated(contractName string, migrationId string)
func (_CanWorkJob *CanWorkJobFilterer) WatchMigrated(opts *bind.WatchOpts, sink chan<- *CanWorkJobMigrated) (event.Subscription, error) {

	logs, sub, err := _CanWorkJob.contract.WatchLogs(opts, "Migrated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkJobMigrated)
				if err := _CanWorkJob.contract.UnpackLog(event, "Migrated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkJobOnCancelEscrowIterator is returned from FilterOnCancelEscrow and is used to iterate over the raw logs and unpacked data for OnCancelEscrow events raised by the CanWorkJob contract.
type CanWorkJobOnCancelEscrowIterator struct {
	Event *CanWorkJobOnCancelEscrow // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkJobOnCancelEscrowIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkJobOnCancelEscrow)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkJobOnCancelEscrow)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkJobOnCancelEscrowIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkJobOnCancelEscrowIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkJobOnCancelEscrow represents a OnCancelEscrow event raised by the CanWorkJob contract.
type CanWorkJobOnCancelEscrow struct {
	Dapp                common.Address
	EscrowId            *big.Int
	PayToProviderAmount *big.Int
	Arbiter             common.Address
	PayToArbiterAmount  *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterOnCancelEscrow is a free log retrieval operation binding the contract event 0x23157ee5a4e89bcebb1fc3e9b6e1533aefe88f9bde92308b49a71e800103542b.
//
// Solidity: e OnCancelEscrow(dapp indexed address, escrowId indexed uint256, payToProviderAmount uint256, arbiter indexed address, payToArbiterAmount uint256)
func (_CanWorkJob *CanWorkJobFilterer) FilterOnCancelEscrow(opts *bind.FilterOpts, dapp []common.Address, escrowId []*big.Int, arbiter []common.Address) (*CanWorkJobOnCancelEscrowIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var escrowIdRule []interface{}
	for _, escrowIdItem := range escrowId {
		escrowIdRule = append(escrowIdRule, escrowIdItem)
	}

	var arbiterRule []interface{}
	for _, arbiterItem := range arbiter {
		arbiterRule = append(arbiterRule, arbiterItem)
	}

	logs, sub, err := _CanWorkJob.contract.FilterLogs(opts, "OnCancelEscrow", dappRule, escrowIdRule, arbiterRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkJobOnCancelEscrowIterator{contract: _CanWorkJob.contract, event: "OnCancelEscrow", logs: logs, sub: sub}, nil
}

// WatchOnCancelEscrow is a free log subscription operation binding the contract event 0x23157ee5a4e89bcebb1fc3e9b6e1533aefe88f9bde92308b49a71e800103542b.
//
// Solidity: e OnCancelEscrow(dapp indexed address, escrowId indexed uint256, payToProviderAmount uint256, arbiter indexed address, payToArbiterAmount uint256)
func (_CanWorkJob *CanWorkJobFilterer) WatchOnCancelEscrow(opts *bind.WatchOpts, sink chan<- *CanWorkJobOnCancelEscrow, dapp []common.Address, escrowId []*big.Int, arbiter []common.Address) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var escrowIdRule []interface{}
	for _, escrowIdItem := range escrowId {
		escrowIdRule = append(escrowIdRule, escrowIdItem)
	}

	var arbiterRule []interface{}
	for _, arbiterItem := range arbiter {
		arbiterRule = append(arbiterRule, arbiterItem)
	}

	logs, sub, err := _CanWorkJob.contract.WatchLogs(opts, "OnCancelEscrow", dappRule, escrowIdRule, arbiterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkJobOnCancelEscrow)
				if err := _CanWorkJob.contract.UnpackLog(event, "OnCancelEscrow", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkJobOnCancelEscrowByProviderIterator is returned from FilterOnCancelEscrowByProvider and is used to iterate over the raw logs and unpacked data for OnCancelEscrowByProvider events raised by the CanWorkJob contract.
type CanWorkJobOnCancelEscrowByProviderIterator struct {
	Event *CanWorkJobOnCancelEscrowByProvider // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkJobOnCancelEscrowByProviderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkJobOnCancelEscrowByProvider)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkJobOnCancelEscrowByProvider)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkJobOnCancelEscrowByProviderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkJobOnCancelEscrowByProviderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkJobOnCancelEscrowByProvider represents a OnCancelEscrowByProvider event raised by the CanWorkJob contract.
type CanWorkJobOnCancelEscrowByProvider struct {
	Dapp     common.Address
	EscrowId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOnCancelEscrowByProvider is a free log retrieval operation binding the contract event 0x42a9d051cfad92ff80e72d1f2fe48fd37941d2e3d8a231b4a2a6993474dd6726.
//
// Solidity: e OnCancelEscrowByProvider(dapp indexed address, escrowId indexed uint256)
func (_CanWorkJob *CanWorkJobFilterer) FilterOnCancelEscrowByProvider(opts *bind.FilterOpts, dapp []common.Address, escrowId []*big.Int) (*CanWorkJobOnCancelEscrowByProviderIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var escrowIdRule []interface{}
	for _, escrowIdItem := range escrowId {
		escrowIdRule = append(escrowIdRule, escrowIdItem)
	}

	logs, sub, err := _CanWorkJob.contract.FilterLogs(opts, "OnCancelEscrowByProvider", dappRule, escrowIdRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkJobOnCancelEscrowByProviderIterator{contract: _CanWorkJob.contract, event: "OnCancelEscrowByProvider", logs: logs, sub: sub}, nil
}

// WatchOnCancelEscrowByProvider is a free log subscription operation binding the contract event 0x42a9d051cfad92ff80e72d1f2fe48fd37941d2e3d8a231b4a2a6993474dd6726.
//
// Solidity: e OnCancelEscrowByProvider(dapp indexed address, escrowId indexed uint256)
func (_CanWorkJob *CanWorkJobFilterer) WatchOnCancelEscrowByProvider(opts *bind.WatchOpts, sink chan<- *CanWorkJobOnCancelEscrowByProvider, dapp []common.Address, escrowId []*big.Int) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var escrowIdRule []interface{}
	for _, escrowIdItem := range escrowId {
		escrowIdRule = append(escrowIdRule, escrowIdItem)
	}

	logs, sub, err := _CanWorkJob.contract.WatchLogs(opts, "OnCancelEscrowByProvider", dappRule, escrowIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkJobOnCancelEscrowByProvider)
				if err := _CanWorkJob.contract.UnpackLog(event, "OnCancelEscrowByProvider", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkJobOnCancelJobByAdminIterator is returned from FilterOnCancelJobByAdmin and is used to iterate over the raw logs and unpacked data for OnCancelJobByAdmin events raised by the CanWorkJob contract.
type CanWorkJobOnCancelJobByAdminIterator struct {
	Event *CanWorkJobOnCancelJobByAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkJobOnCancelJobByAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkJobOnCancelJobByAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkJobOnCancelJobByAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkJobOnCancelJobByAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkJobOnCancelJobByAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkJobOnCancelJobByAdmin represents a OnCancelJobByAdmin event raised by the CanWorkJob contract.
type CanWorkJobOnCancelJobByAdmin struct {
	Dapp                    common.Address
	JobId                   [32]byte
	PayToProviderPercentage uint8
	Arbiter                 common.Address
	PayToArbiterPercentage  uint8
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterOnCancelJobByAdmin is a free log retrieval operation binding the contract event 0xb5147162f3f7e77567ea20823c3339ae369a07c96dafce09964879ed9ea17611.
//
// Solidity: e OnCancelJobByAdmin(dapp indexed address, jobId indexed bytes32, payToProviderPercentage uint8, arbiter indexed address, payToArbiterPercentage uint8)
func (_CanWorkJob *CanWorkJobFilterer) FilterOnCancelJobByAdmin(opts *bind.FilterOpts, dapp []common.Address, jobId [][32]byte, arbiter []common.Address) (*CanWorkJobOnCancelJobByAdminIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var jobIdRule []interface{}
	for _, jobIdItem := range jobId {
		jobIdRule = append(jobIdRule, jobIdItem)
	}

	var arbiterRule []interface{}
	for _, arbiterItem := range arbiter {
		arbiterRule = append(arbiterRule, arbiterItem)
	}

	logs, sub, err := _CanWorkJob.contract.FilterLogs(opts, "OnCancelJobByAdmin", dappRule, jobIdRule, arbiterRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkJobOnCancelJobByAdminIterator{contract: _CanWorkJob.contract, event: "OnCancelJobByAdmin", logs: logs, sub: sub}, nil
}

// WatchOnCancelJobByAdmin is a free log subscription operation binding the contract event 0xb5147162f3f7e77567ea20823c3339ae369a07c96dafce09964879ed9ea17611.
//
// Solidity: e OnCancelJobByAdmin(dapp indexed address, jobId indexed bytes32, payToProviderPercentage uint8, arbiter indexed address, payToArbiterPercentage uint8)
func (_CanWorkJob *CanWorkJobFilterer) WatchOnCancelJobByAdmin(opts *bind.WatchOpts, sink chan<- *CanWorkJobOnCancelJobByAdmin, dapp []common.Address, jobId [][32]byte, arbiter []common.Address) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var jobIdRule []interface{}
	for _, jobIdItem := range jobId {
		jobIdRule = append(jobIdRule, jobIdItem)
	}

	var arbiterRule []interface{}
	for _, arbiterItem := range arbiter {
		arbiterRule = append(arbiterRule, arbiterItem)
	}

	logs, sub, err := _CanWorkJob.contract.WatchLogs(opts, "OnCancelJobByAdmin", dappRule, jobIdRule, arbiterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkJobOnCancelJobByAdmin)
				if err := _CanWorkJob.contract.UnpackLog(event, "OnCancelJobByAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkJobOnCancelJobByProviderIterator is returned from FilterOnCancelJobByProvider and is used to iterate over the raw logs and unpacked data for OnCancelJobByProvider events raised by the CanWorkJob contract.
type CanWorkJobOnCancelJobByProviderIterator struct {
	Event *CanWorkJobOnCancelJobByProvider // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkJobOnCancelJobByProviderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkJobOnCancelJobByProvider)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkJobOnCancelJobByProvider)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkJobOnCancelJobByProviderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkJobOnCancelJobByProviderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkJobOnCancelJobByProvider represents a OnCancelJobByProvider event raised by the CanWorkJob contract.
type CanWorkJobOnCancelJobByProvider struct {
	Dapp  common.Address
	JobId [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterOnCancelJobByProvider is a free log retrieval operation binding the contract event 0x9deeb35dcae810f88ff11beec766eaa1b2e9f1ef7bcefbb8f2a3f91fdf98c426.
//
// Solidity: e OnCancelJobByProvider(dapp indexed address, jobId indexed bytes32)
func (_CanWorkJob *CanWorkJobFilterer) FilterOnCancelJobByProvider(opts *bind.FilterOpts, dapp []common.Address, jobId [][32]byte) (*CanWorkJobOnCancelJobByProviderIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var jobIdRule []interface{}
	for _, jobIdItem := range jobId {
		jobIdRule = append(jobIdRule, jobIdItem)
	}

	logs, sub, err := _CanWorkJob.contract.FilterLogs(opts, "OnCancelJobByProvider", dappRule, jobIdRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkJobOnCancelJobByProviderIterator{contract: _CanWorkJob.contract, event: "OnCancelJobByProvider", logs: logs, sub: sub}, nil
}

// WatchOnCancelJobByProvider is a free log subscription operation binding the contract event 0x9deeb35dcae810f88ff11beec766eaa1b2e9f1ef7bcefbb8f2a3f91fdf98c426.
//
// Solidity: e OnCancelJobByProvider(dapp indexed address, jobId indexed bytes32)
func (_CanWorkJob *CanWorkJobFilterer) WatchOnCancelJobByProvider(opts *bind.WatchOpts, sink chan<- *CanWorkJobOnCancelJobByProvider, dapp []common.Address, jobId [][32]byte) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var jobIdRule []interface{}
	for _, jobIdItem := range jobId {
		jobIdRule = append(jobIdRule, jobIdItem)
	}

	logs, sub, err := _CanWorkJob.contract.WatchLogs(opts, "OnCancelJobByProvider", dappRule, jobIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkJobOnCancelJobByProvider)
				if err := _CanWorkJob.contract.UnpackLog(event, "OnCancelJobByProvider", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkJobOnCompleteEscrowIterator is returned from FilterOnCompleteEscrow and is used to iterate over the raw logs and unpacked data for OnCompleteEscrow events raised by the CanWorkJob contract.
type CanWorkJobOnCompleteEscrowIterator struct {
	Event *CanWorkJobOnCompleteEscrow // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkJobOnCompleteEscrowIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkJobOnCompleteEscrow)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkJobOnCompleteEscrow)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkJobOnCompleteEscrowIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkJobOnCompleteEscrowIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkJobOnCompleteEscrow represents a OnCompleteEscrow event raised by the CanWorkJob contract.
type CanWorkJobOnCompleteEscrow struct {
	Dapp     common.Address
	EscrowId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOnCompleteEscrow is a free log retrieval operation binding the contract event 0x4bebfffc0dc0fb54ffd42c8fe2424e8fe0c482f089c4d0d6e6f1ea5d9e34248a.
//
// Solidity: e OnCompleteEscrow(dapp indexed address, escrowId indexed uint256)
func (_CanWorkJob *CanWorkJobFilterer) FilterOnCompleteEscrow(opts *bind.FilterOpts, dapp []common.Address, escrowId []*big.Int) (*CanWorkJobOnCompleteEscrowIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var escrowIdRule []interface{}
	for _, escrowIdItem := range escrowId {
		escrowIdRule = append(escrowIdRule, escrowIdItem)
	}

	logs, sub, err := _CanWorkJob.contract.FilterLogs(opts, "OnCompleteEscrow", dappRule, escrowIdRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkJobOnCompleteEscrowIterator{contract: _CanWorkJob.contract, event: "OnCompleteEscrow", logs: logs, sub: sub}, nil
}

// WatchOnCompleteEscrow is a free log subscription operation binding the contract event 0x4bebfffc0dc0fb54ffd42c8fe2424e8fe0c482f089c4d0d6e6f1ea5d9e34248a.
//
// Solidity: e OnCompleteEscrow(dapp indexed address, escrowId indexed uint256)
func (_CanWorkJob *CanWorkJobFilterer) WatchOnCompleteEscrow(opts *bind.WatchOpts, sink chan<- *CanWorkJobOnCompleteEscrow, dapp []common.Address, escrowId []*big.Int) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var escrowIdRule []interface{}
	for _, escrowIdItem := range escrowId {
		escrowIdRule = append(escrowIdRule, escrowIdItem)
	}

	logs, sub, err := _CanWorkJob.contract.WatchLogs(opts, "OnCompleteEscrow", dappRule, escrowIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkJobOnCompleteEscrow)
				if err := _CanWorkJob.contract.UnpackLog(event, "OnCompleteEscrow", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkJobOnCompleteJobIterator is returned from FilterOnCompleteJob and is used to iterate over the raw logs and unpacked data for OnCompleteJob events raised by the CanWorkJob contract.
type CanWorkJobOnCompleteJobIterator struct {
	Event *CanWorkJobOnCompleteJob // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkJobOnCompleteJobIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkJobOnCompleteJob)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkJobOnCompleteJob)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkJobOnCompleteJobIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkJobOnCompleteJobIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkJobOnCompleteJob represents a OnCompleteJob event raised by the CanWorkJob contract.
type CanWorkJobOnCompleteJob struct {
	Dapp  common.Address
	JobId [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterOnCompleteJob is a free log retrieval operation binding the contract event 0x5fa8e6f4fbdedc8f67f68ed5dd5a194353476578eb9231d8925543e55fec008a.
//
// Solidity: e OnCompleteJob(dapp indexed address, jobId indexed bytes32)
func (_CanWorkJob *CanWorkJobFilterer) FilterOnCompleteJob(opts *bind.FilterOpts, dapp []common.Address, jobId [][32]byte) (*CanWorkJobOnCompleteJobIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var jobIdRule []interface{}
	for _, jobIdItem := range jobId {
		jobIdRule = append(jobIdRule, jobIdItem)
	}

	logs, sub, err := _CanWorkJob.contract.FilterLogs(opts, "OnCompleteJob", dappRule, jobIdRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkJobOnCompleteJobIterator{contract: _CanWorkJob.contract, event: "OnCompleteJob", logs: logs, sub: sub}, nil
}

// WatchOnCompleteJob is a free log subscription operation binding the contract event 0x5fa8e6f4fbdedc8f67f68ed5dd5a194353476578eb9231d8925543e55fec008a.
//
// Solidity: e OnCompleteJob(dapp indexed address, jobId indexed bytes32)
func (_CanWorkJob *CanWorkJobFilterer) WatchOnCompleteJob(opts *bind.WatchOpts, sink chan<- *CanWorkJobOnCompleteJob, dapp []common.Address, jobId [][32]byte) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var jobIdRule []interface{}
	for _, jobIdItem := range jobId {
		jobIdRule = append(jobIdRule, jobIdItem)
	}

	logs, sub, err := _CanWorkJob.contract.WatchLogs(opts, "OnCompleteJob", dappRule, jobIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkJobOnCompleteJob)
				if err := _CanWorkJob.contract.UnpackLog(event, "OnCompleteJob", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkJobOnCreateEscrowIterator is returned from FilterOnCreateEscrow and is used to iterate over the raw logs and unpacked data for OnCreateEscrow events raised by the CanWorkJob contract.
type CanWorkJobOnCreateEscrowIterator struct {
	Event *CanWorkJobOnCreateEscrow // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkJobOnCreateEscrowIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkJobOnCreateEscrow)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkJobOnCreateEscrow)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkJobOnCreateEscrowIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkJobOnCreateEscrowIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkJobOnCreateEscrow represents a OnCreateEscrow event raised by the CanWorkJob contract.
type CanWorkJobOnCreateEscrow struct {
	Dapp      common.Address
	Client    common.Address
	Provider  common.Address
	Amount    *big.Int
	DaiAmount *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterOnCreateEscrow is a free log retrieval operation binding the contract event 0x2deff110fb90284ba1ebd12f5a2a449109b5327e5144dcf39bae0fa2fcfa7afb.
//
// Solidity: e OnCreateEscrow(dapp indexed address, client indexed address, provider indexed address, amount uint256, daiAmount uint256)
func (_CanWorkJob *CanWorkJobFilterer) FilterOnCreateEscrow(opts *bind.FilterOpts, dapp []common.Address, client []common.Address, provider []common.Address) (*CanWorkJobOnCreateEscrowIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var clientRule []interface{}
	for _, clientItem := range client {
		clientRule = append(clientRule, clientItem)
	}
	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _CanWorkJob.contract.FilterLogs(opts, "OnCreateEscrow", dappRule, clientRule, providerRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkJobOnCreateEscrowIterator{contract: _CanWorkJob.contract, event: "OnCreateEscrow", logs: logs, sub: sub}, nil
}

// WatchOnCreateEscrow is a free log subscription operation binding the contract event 0x2deff110fb90284ba1ebd12f5a2a449109b5327e5144dcf39bae0fa2fcfa7afb.
//
// Solidity: e OnCreateEscrow(dapp indexed address, client indexed address, provider indexed address, amount uint256, daiAmount uint256)
func (_CanWorkJob *CanWorkJobFilterer) WatchOnCreateEscrow(opts *bind.WatchOpts, sink chan<- *CanWorkJobOnCreateEscrow, dapp []common.Address, client []common.Address, provider []common.Address) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var clientRule []interface{}
	for _, clientItem := range client {
		clientRule = append(clientRule, clientItem)
	}
	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _CanWorkJob.contract.WatchLogs(opts, "OnCreateEscrow", dappRule, clientRule, providerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkJobOnCreateEscrow)
				if err := _CanWorkJob.contract.UnpackLog(event, "OnCreateEscrow", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkJobOnCreateJobIterator is returned from FilterOnCreateJob and is used to iterate over the raw logs and unpacked data for OnCreateJob events raised by the CanWorkJob contract.
type CanWorkJobOnCreateJobIterator struct {
	Event *CanWorkJobOnCreateJob // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkJobOnCreateJobIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkJobOnCreateJob)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkJobOnCreateJob)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkJobOnCreateJobIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkJobOnCreateJobIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkJobOnCreateJob represents a OnCreateJob event raised by the CanWorkJob contract.
type CanWorkJobOnCreateJob struct {
	Dapp       common.Address
	JobId      [32]byte
	Client     common.Address
	Provider   common.Address
	TotalCosts *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterOnCreateJob is a free log retrieval operation binding the contract event 0x06ec2805bab16df077e1bf66c474762caec30f56f6c01e4e673aa60b8dca979e.
//
// Solidity: e OnCreateJob(dapp indexed address, jobId indexed bytes32, client address, provider indexed address, totalCosts uint256)
func (_CanWorkJob *CanWorkJobFilterer) FilterOnCreateJob(opts *bind.FilterOpts, dapp []common.Address, jobId [][32]byte, provider []common.Address) (*CanWorkJobOnCreateJobIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var jobIdRule []interface{}
	for _, jobIdItem := range jobId {
		jobIdRule = append(jobIdRule, jobIdItem)
	}

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _CanWorkJob.contract.FilterLogs(opts, "OnCreateJob", dappRule, jobIdRule, providerRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkJobOnCreateJobIterator{contract: _CanWorkJob.contract, event: "OnCreateJob", logs: logs, sub: sub}, nil
}

// WatchOnCreateJob is a free log subscription operation binding the contract event 0x06ec2805bab16df077e1bf66c474762caec30f56f6c01e4e673aa60b8dca979e.
//
// Solidity: e OnCreateJob(dapp indexed address, jobId indexed bytes32, client address, provider indexed address, totalCosts uint256)
func (_CanWorkJob *CanWorkJobFilterer) WatchOnCreateJob(opts *bind.WatchOpts, sink chan<- *CanWorkJobOnCreateJob, dapp []common.Address, jobId [][32]byte, provider []common.Address) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var jobIdRule []interface{}
	for _, jobIdItem := range jobId {
		jobIdRule = append(jobIdRule, jobIdItem)
	}

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _CanWorkJob.contract.WatchLogs(opts, "OnCreateJob", dappRule, jobIdRule, providerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkJobOnCreateJob)
				if err := _CanWorkJob.contract.UnpackLog(event, "OnCreateJob", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// CanWorkJobOnInitializeIterator is returned from FilterOnInitialize and is used to iterate over the raw logs and unpacked data for OnInitialize events raised by the CanWorkJob contract.
type CanWorkJobOnInitializeIterator struct {
	Event *CanWorkJobOnInitialize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CanWorkJobOnInitializeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CanWorkJobOnInitialize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CanWorkJobOnInitialize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CanWorkJobOnInitializeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CanWorkJobOnInitializeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CanWorkJobOnInitialize represents a OnInitialize event raised by the CanWorkJob contract.
type CanWorkJobOnInitialize struct {
	Token       common.Address
	DApp        common.Address
	PriceOracle common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterOnInitialize is a free log retrieval operation binding the contract event 0x92bd6b72cc9afdcca9b04e941a144617e9c12e1b5160a3fb40163fe4a786bff0.
//
// Solidity: e OnInitialize(token indexed address, dApp indexed address, priceOracle address)
func (_CanWorkJob *CanWorkJobFilterer) FilterOnInitialize(opts *bind.FilterOpts, token []common.Address, dApp []common.Address) (*CanWorkJobOnInitializeIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var dAppRule []interface{}
	for _, dAppItem := range dApp {
		dAppRule = append(dAppRule, dAppItem)
	}

	logs, sub, err := _CanWorkJob.contract.FilterLogs(opts, "OnInitialize", tokenRule, dAppRule)
	if err != nil {
		return nil, err
	}
	return &CanWorkJobOnInitializeIterator{contract: _CanWorkJob.contract, event: "OnInitialize", logs: logs, sub: sub}, nil
}

// WatchOnInitialize is a free log subscription operation binding the contract event 0x92bd6b72cc9afdcca9b04e941a144617e9c12e1b5160a3fb40163fe4a786bff0.
//
// Solidity: e OnInitialize(token indexed address, dApp indexed address, priceOracle address)
func (_CanWorkJob *CanWorkJobFilterer) WatchOnInitialize(opts *bind.WatchOpts, sink chan<- *CanWorkJobOnInitialize, token []common.Address, dApp []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var dAppRule []interface{}
	for _, dAppItem := range dApp {
		dAppRule = append(dAppRule, dAppItem)
	}

	logs, sub, err := _CanWorkJob.contract.WatchLogs(opts, "OnInitialize", tokenRule, dAppRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CanWorkJobOnInitialize)
				if err := _CanWorkJob.contract.UnpackLog(event, "OnInitialize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ERC20ABI is the input ABI used to generate the binding from.
const ERC20ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ERC20Bin is the compiled bytecode used for deploying new contracts.
const ERC20Bin = `0x`

// DeployERC20 deploys a new Ethereum contract, binding an instance of ERC20 to it.
func DeployERC20(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC20, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ERC20Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20{ERC20Caller: ERC20Caller{contract: contract}, ERC20Transactor: ERC20Transactor{contract: contract}, ERC20Filterer: ERC20Filterer{contract: contract}}, nil
}

// ERC20 is an auto generated Go binding around an Ethereum contract.
type ERC20 struct {
	ERC20Caller     // Read-only binding to the contract
	ERC20Transactor // Write-only binding to the contract
	ERC20Filterer   // Log filterer for contract events
}

// ERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20Session struct {
	Contract     *ERC20            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20CallerSession struct {
	Contract *ERC20Caller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20TransactorSession struct {
	Contract     *ERC20Transactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20Raw struct {
	Contract *ERC20 // Generic contract binding to access the raw methods on
}

// ERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20CallerRaw struct {
	Contract *ERC20Caller // Generic read-only contract binding to access the raw methods on
}

// ERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20TransactorRaw struct {
	Contract *ERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20 creates a new instance of ERC20, bound to a specific deployed contract.
func NewERC20(address common.Address, backend bind.ContractBackend) (*ERC20, error) {
	contract, err := bindERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20{ERC20Caller: ERC20Caller{contract: contract}, ERC20Transactor: ERC20Transactor{contract: contract}, ERC20Filterer: ERC20Filterer{contract: contract}}, nil
}

// NewERC20Caller creates a new read-only instance of ERC20, bound to a specific deployed contract.
func NewERC20Caller(address common.Address, caller bind.ContractCaller) (*ERC20Caller, error) {
	contract, err := bindERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20Caller{contract: contract}, nil
}

// NewERC20Transactor creates a new write-only instance of ERC20, bound to a specific deployed contract.
func NewERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*ERC20Transactor, error) {
	contract, err := bindERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20Transactor{contract: contract}, nil
}

// NewERC20Filterer creates a new log filterer instance of ERC20, bound to a specific deployed contract.
func NewERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*ERC20Filterer, error) {
	contract, err := bindERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20Filterer{contract: contract}, nil
}

// bindERC20 binds a generic wrapper to an already deployed contract.
func bindERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20 *ERC20Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC20.Contract.ERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20 *ERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20.Contract.ERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20 *ERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20.Contract.ERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20 *ERC20CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20 *ERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20 *ERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(owner address, spender address) constant returns(uint256)
func (_ERC20 *ERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20.contract.Call(opts, out, "allowance", owner, spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(owner address, spender address) constant returns(uint256)
func (_ERC20 *ERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20.Contract.Allowance(&_ERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(owner address, spender address) constant returns(uint256)
func (_ERC20 *ERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20.Contract.Allowance(&_ERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(who address) constant returns(uint256)
func (_ERC20 *ERC20Caller) BalanceOf(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20.contract.Call(opts, out, "balanceOf", who)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(who address) constant returns(uint256)
func (_ERC20 *ERC20Session) BalanceOf(who common.Address) (*big.Int, error) {
	return _ERC20.Contract.BalanceOf(&_ERC20.CallOpts, who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(who address) constant returns(uint256)
func (_ERC20 *ERC20CallerSession) BalanceOf(who common.Address) (*big.Int, error) {
	return _ERC20.Contract.BalanceOf(&_ERC20.CallOpts, who)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_ERC20 *ERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_ERC20 *ERC20Session) TotalSupply() (*big.Int, error) {
	return _ERC20.Contract.TotalSupply(&_ERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_ERC20 *ERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20.Contract.TotalSupply(&_ERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(spender address, value uint256) returns(bool)
func (_ERC20 *ERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(spender address, value uint256) returns(bool)
func (_ERC20 *ERC20Session) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Approve(&_ERC20.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(spender address, value uint256) returns(bool)
func (_ERC20 *ERC20TransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Approve(&_ERC20.TransactOpts, spender, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(to address, value uint256) returns(bool)
func (_ERC20 *ERC20Transactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(to address, value uint256) returns(bool)
func (_ERC20 *ERC20Session) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Transfer(&_ERC20.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(to address, value uint256) returns(bool)
func (_ERC20 *ERC20TransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Transfer(&_ERC20.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(from address, to address, value uint256) returns(bool)
func (_ERC20 *ERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(from address, to address, value uint256) returns(bool)
func (_ERC20 *ERC20Session) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.TransferFrom(&_ERC20.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(from address, to address, value uint256) returns(bool)
func (_ERC20 *ERC20TransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.TransferFrom(&_ERC20.TransactOpts, from, to, value)
}

// ERC20BancorPriceOracleABI is the input ABI used to generate the binding from.
const ERC20BancorPriceOracleABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenToDai\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_daiAmount\",\"type\":\"uint256\"}],\"name\":\"getDaiToToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ERC20BancorPriceOracleBin is the compiled bytecode used for deploying new contracts.
const ERC20BancorPriceOracleBin = `0x`

// DeployERC20BancorPriceOracle deploys a new Ethereum contract, binding an instance of ERC20BancorPriceOracle to it.
func DeployERC20BancorPriceOracle(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC20BancorPriceOracle, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20BancorPriceOracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ERC20BancorPriceOracleBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20BancorPriceOracle{ERC20BancorPriceOracleCaller: ERC20BancorPriceOracleCaller{contract: contract}, ERC20BancorPriceOracleTransactor: ERC20BancorPriceOracleTransactor{contract: contract}, ERC20BancorPriceOracleFilterer: ERC20BancorPriceOracleFilterer{contract: contract}}, nil
}

// ERC20BancorPriceOracle is an auto generated Go binding around an Ethereum contract.
type ERC20BancorPriceOracle struct {
	ERC20BancorPriceOracleCaller     // Read-only binding to the contract
	ERC20BancorPriceOracleTransactor // Write-only binding to the contract
	ERC20BancorPriceOracleFilterer   // Log filterer for contract events
}

// ERC20BancorPriceOracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20BancorPriceOracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20BancorPriceOracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20BancorPriceOracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20BancorPriceOracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20BancorPriceOracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20BancorPriceOracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20BancorPriceOracleSession struct {
	Contract     *ERC20BancorPriceOracle // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ERC20BancorPriceOracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20BancorPriceOracleCallerSession struct {
	Contract *ERC20BancorPriceOracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// ERC20BancorPriceOracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20BancorPriceOracleTransactorSession struct {
	Contract     *ERC20BancorPriceOracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// ERC20BancorPriceOracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20BancorPriceOracleRaw struct {
	Contract *ERC20BancorPriceOracle // Generic contract binding to access the raw methods on
}

// ERC20BancorPriceOracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20BancorPriceOracleCallerRaw struct {
	Contract *ERC20BancorPriceOracleCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20BancorPriceOracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20BancorPriceOracleTransactorRaw struct {
	Contract *ERC20BancorPriceOracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20BancorPriceOracle creates a new instance of ERC20BancorPriceOracle, bound to a specific deployed contract.
func NewERC20BancorPriceOracle(address common.Address, backend bind.ContractBackend) (*ERC20BancorPriceOracle, error) {
	contract, err := bindERC20BancorPriceOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20BancorPriceOracle{ERC20BancorPriceOracleCaller: ERC20BancorPriceOracleCaller{contract: contract}, ERC20BancorPriceOracleTransactor: ERC20BancorPriceOracleTransactor{contract: contract}, ERC20BancorPriceOracleFilterer: ERC20BancorPriceOracleFilterer{contract: contract}}, nil
}

// NewERC20BancorPriceOracleCaller creates a new read-only instance of ERC20BancorPriceOracle, bound to a specific deployed contract.
func NewERC20BancorPriceOracleCaller(address common.Address, caller bind.ContractCaller) (*ERC20BancorPriceOracleCaller, error) {
	contract, err := bindERC20BancorPriceOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20BancorPriceOracleCaller{contract: contract}, nil
}

// NewERC20BancorPriceOracleTransactor creates a new write-only instance of ERC20BancorPriceOracle, bound to a specific deployed contract.
func NewERC20BancorPriceOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20BancorPriceOracleTransactor, error) {
	contract, err := bindERC20BancorPriceOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20BancorPriceOracleTransactor{contract: contract}, nil
}

// NewERC20BancorPriceOracleFilterer creates a new log filterer instance of ERC20BancorPriceOracle, bound to a specific deployed contract.
func NewERC20BancorPriceOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20BancorPriceOracleFilterer, error) {
	contract, err := bindERC20BancorPriceOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20BancorPriceOracleFilterer{contract: contract}, nil
}

// bindERC20BancorPriceOracle binds a generic wrapper to an already deployed contract.
func bindERC20BancorPriceOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20BancorPriceOracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20BancorPriceOracle *ERC20BancorPriceOracleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC20BancorPriceOracle.Contract.ERC20BancorPriceOracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20BancorPriceOracle *ERC20BancorPriceOracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20BancorPriceOracle.Contract.ERC20BancorPriceOracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20BancorPriceOracle *ERC20BancorPriceOracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20BancorPriceOracle.Contract.ERC20BancorPriceOracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20BancorPriceOracle *ERC20BancorPriceOracleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ERC20BancorPriceOracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20BancorPriceOracle *ERC20BancorPriceOracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20BancorPriceOracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20BancorPriceOracle *ERC20BancorPriceOracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20BancorPriceOracle.Contract.contract.Transact(opts, method, params...)
}

// GetDaiToToken is a free data retrieval call binding the contract method 0xc8a1d96e.
//
// Solidity: function getDaiToToken(_daiAmount uint256) constant returns(uint256)
func (_ERC20BancorPriceOracle *ERC20BancorPriceOracleCaller) GetDaiToToken(opts *bind.CallOpts, _daiAmount *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20BancorPriceOracle.contract.Call(opts, out, "getDaiToToken", _daiAmount)
	return *ret0, err
}

// GetDaiToToken is a free data retrieval call binding the contract method 0xc8a1d96e.
//
// Solidity: function getDaiToToken(_daiAmount uint256) constant returns(uint256)
func (_ERC20BancorPriceOracle *ERC20BancorPriceOracleSession) GetDaiToToken(_daiAmount *big.Int) (*big.Int, error) {
	return _ERC20BancorPriceOracle.Contract.GetDaiToToken(&_ERC20BancorPriceOracle.CallOpts, _daiAmount)
}

// GetDaiToToken is a free data retrieval call binding the contract method 0xc8a1d96e.
//
// Solidity: function getDaiToToken(_daiAmount uint256) constant returns(uint256)
func (_ERC20BancorPriceOracle *ERC20BancorPriceOracleCallerSession) GetDaiToToken(_daiAmount *big.Int) (*big.Int, error) {
	return _ERC20BancorPriceOracle.Contract.GetDaiToToken(&_ERC20BancorPriceOracle.CallOpts, _daiAmount)
}

// GetTokenToDai is a free data retrieval call binding the contract method 0x9fd650ce.
//
// Solidity: function getTokenToDai(_tokenAmount uint256) constant returns(uint256)
func (_ERC20BancorPriceOracle *ERC20BancorPriceOracleCaller) GetTokenToDai(opts *bind.CallOpts, _tokenAmount *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ERC20BancorPriceOracle.contract.Call(opts, out, "getTokenToDai", _tokenAmount)
	return *ret0, err
}

// GetTokenToDai is a free data retrieval call binding the contract method 0x9fd650ce.
//
// Solidity: function getTokenToDai(_tokenAmount uint256) constant returns(uint256)
func (_ERC20BancorPriceOracle *ERC20BancorPriceOracleSession) GetTokenToDai(_tokenAmount *big.Int) (*big.Int, error) {
	return _ERC20BancorPriceOracle.Contract.GetTokenToDai(&_ERC20BancorPriceOracle.CallOpts, _tokenAmount)
}

// GetTokenToDai is a free data retrieval call binding the contract method 0x9fd650ce.
//
// Solidity: function getTokenToDai(_tokenAmount uint256) constant returns(uint256)
func (_ERC20BancorPriceOracle *ERC20BancorPriceOracleCallerSession) GetTokenToDai(_tokenAmount *big.Int) (*big.Int, error) {
	return _ERC20BancorPriceOracle.Contract.GetTokenToDai(&_ERC20BancorPriceOracle.CallOpts, _tokenAmount)
}

// EscrowABI is the input ABI used to generate the binding from.
const EscrowABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_escrowId\",\"type\":\"uint256\"}],\"name\":\"getEscrow\",\"outputs\":[{\"name\":\"client\",\"type\":\"address\"},{\"name\":\"provider\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"totalValueDai\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"closedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"migrationId\",\"type\":\"string\"}],\"name\":\"isMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_escrowId\",\"type\":\"uint256\"}],\"name\":\"getEscrowPayments\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"totalValueDai\",\"type\":\"uint256\"},{\"name\":\"payoutAmount\",\"type\":\"uint256\"},{\"name\":\"paidToDappAmount\",\"type\":\"uint256\"},{\"name\":\"paidToProviderAmount\",\"type\":\"uint256\"},{\"name\":\"paidToClientAmount\",\"type\":\"uint256\"},{\"name\":\"paidToArbiterAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"dApp\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"priceOracle\",\"type\":\"address\"}],\"name\":\"OnInitialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"OnCreateEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"escrowId\",\"type\":\"uint256\"}],\"name\":\"OnCompleteEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"escrowId\",\"type\":\"uint256\"}],\"name\":\"OnCancelEscrowByProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"escrowId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payToProviderAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"arbiter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payToArbiterAmount\",\"type\":\"uint256\"}],\"name\":\"OnCancelEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"migrationId\",\"type\":\"string\"}],\"name\":\"Migrated\",\"type\":\"event\"}]"

// EscrowBin is the compiled bytecode used for deploying new contracts.
const EscrowBin = `0x6080604052600060025534801561001557600080fd5b50610516806100256000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632630c12f81146100665780637d19e596146100a4578063c0bac1a814610110578063fd232b59146101bb575b600080fd5b34801561007257600080fd5b5061007b61020b565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156100b057600080fd5b506100bc600435610227565b6040805173ffffffffffffffffffffffffffffffffffffffff988916815296909716602087015285870194909452606085019290925260ff16608084015260a083015260c082015290519081900360e00190f35b34801561011c57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101a794369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506103469650505050505050565b604080519115158252519081900360200190f35b3480156101c757600080fd5b506101d360043561040d565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b60055473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600080600080881180156102505750600088815260066020819052604082200154115b15156102bd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4d75737420626520612076616c696420657363726f7720496400000000000000604482015290519081900360640190fd5b600088815260066020526040902060018101546002808301546003840154600485015460059095015473ffffffffffffffffffffffffffffffffffffffff948516959290941693909260ff9091169081111561031557fe5b60009c8d52600660208190526040909d209c8d01546007909d0154949d939c929b5090995097509550909350915050565b600080836040518082805190602001908083835b602083106103795780518252601f19909201916020918201910161035a565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101842086519094879450925082918401908083835b602083106103d55780518252601f1990920191602091820191016103b6565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff1695945050505050565b600080600080600080600080881180156104365750600088815260066020819052604082200154115b15156104a357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4d75737420626520612076616c696420657363726f7720496400000000000000604482015290519081900360640190fd5b5050506000948552505060066020525050604090206003810154600482015460088301546009840154600a850154600b860154600c909601549496939592949193909291905600a165627a7a72305820c8e2f10d036a56689634946a9ed46b1d03fee2d89eecc30d8ac4e7f8642597110029`

// DeployEscrow deploys a new Ethereum contract, binding an instance of Escrow to it.
func DeployEscrow(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Escrow, error) {
	parsed, err := abi.JSON(strings.NewReader(EscrowABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(EscrowBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Escrow{EscrowCaller: EscrowCaller{contract: contract}, EscrowTransactor: EscrowTransactor{contract: contract}, EscrowFilterer: EscrowFilterer{contract: contract}}, nil
}

// Escrow is an auto generated Go binding around an Ethereum contract.
type Escrow struct {
	EscrowCaller     // Read-only binding to the contract
	EscrowTransactor // Write-only binding to the contract
	EscrowFilterer   // Log filterer for contract events
}

// EscrowCaller is an auto generated read-only Go binding around an Ethereum contract.
type EscrowCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EscrowTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EscrowTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EscrowFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EscrowFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EscrowSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EscrowSession struct {
	Contract     *Escrow           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EscrowCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EscrowCallerSession struct {
	Contract *EscrowCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// EscrowTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EscrowTransactorSession struct {
	Contract     *EscrowTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EscrowRaw is an auto generated low-level Go binding around an Ethereum contract.
type EscrowRaw struct {
	Contract *Escrow // Generic contract binding to access the raw methods on
}

// EscrowCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EscrowCallerRaw struct {
	Contract *EscrowCaller // Generic read-only contract binding to access the raw methods on
}

// EscrowTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EscrowTransactorRaw struct {
	Contract *EscrowTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEscrow creates a new instance of Escrow, bound to a specific deployed contract.
func NewEscrow(address common.Address, backend bind.ContractBackend) (*Escrow, error) {
	contract, err := bindEscrow(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Escrow{EscrowCaller: EscrowCaller{contract: contract}, EscrowTransactor: EscrowTransactor{contract: contract}, EscrowFilterer: EscrowFilterer{contract: contract}}, nil
}

// NewEscrowCaller creates a new read-only instance of Escrow, bound to a specific deployed contract.
func NewEscrowCaller(address common.Address, caller bind.ContractCaller) (*EscrowCaller, error) {
	contract, err := bindEscrow(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EscrowCaller{contract: contract}, nil
}

// NewEscrowTransactor creates a new write-only instance of Escrow, bound to a specific deployed contract.
func NewEscrowTransactor(address common.Address, transactor bind.ContractTransactor) (*EscrowTransactor, error) {
	contract, err := bindEscrow(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EscrowTransactor{contract: contract}, nil
}

// NewEscrowFilterer creates a new log filterer instance of Escrow, bound to a specific deployed contract.
func NewEscrowFilterer(address common.Address, filterer bind.ContractFilterer) (*EscrowFilterer, error) {
	contract, err := bindEscrow(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EscrowFilterer{contract: contract}, nil
}

// bindEscrow binds a generic wrapper to an already deployed contract.
func bindEscrow(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EscrowABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Escrow *EscrowRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Escrow.Contract.EscrowCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Escrow *EscrowRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Escrow.Contract.EscrowTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Escrow *EscrowRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Escrow.Contract.EscrowTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Escrow *EscrowCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Escrow.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Escrow *EscrowTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Escrow.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Escrow *EscrowTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Escrow.Contract.contract.Transact(opts, method, params...)
}

// GetEscrow is a free data retrieval call binding the contract method 0x7d19e596.
//
// Solidity: function getEscrow(_escrowId uint256) constant returns(client address, provider address, amount uint256, totalValueDai uint256, status uint8, createdAt uint256, closedAt uint256)
func (_Escrow *EscrowCaller) GetEscrow(opts *bind.CallOpts, _escrowId *big.Int) (struct {
	Client        common.Address
	Provider      common.Address
	Amount        *big.Int
	TotalValueDai *big.Int
	Status        uint8
	CreatedAt     *big.Int
	ClosedAt      *big.Int
}, error) {
	ret := new(struct {
		Client        common.Address
		Provider      common.Address
		Amount        *big.Int
		TotalValueDai *big.Int
		Status        uint8
		CreatedAt     *big.Int
		ClosedAt      *big.Int
	})
	out := ret
	err := _Escrow.contract.Call(opts, out, "getEscrow", _escrowId)
	return *ret, err
}

// GetEscrow is a free data retrieval call binding the contract method 0x7d19e596.
//
// Solidity: function getEscrow(_escrowId uint256) constant returns(client address, provider address, amount uint256, totalValueDai uint256, status uint8, createdAt uint256, closedAt uint256)
func (_Escrow *EscrowSession) GetEscrow(_escrowId *big.Int) (struct {
	Client        common.Address
	Provider      common.Address
	Amount        *big.Int
	TotalValueDai *big.Int
	Status        uint8
	CreatedAt     *big.Int
	ClosedAt      *big.Int
}, error) {
	return _Escrow.Contract.GetEscrow(&_Escrow.CallOpts, _escrowId)
}

// GetEscrow is a free data retrieval call binding the contract method 0x7d19e596.
//
// Solidity: function getEscrow(_escrowId uint256) constant returns(client address, provider address, amount uint256, totalValueDai uint256, status uint8, createdAt uint256, closedAt uint256)
func (_Escrow *EscrowCallerSession) GetEscrow(_escrowId *big.Int) (struct {
	Client        common.Address
	Provider      common.Address
	Amount        *big.Int
	TotalValueDai *big.Int
	Status        uint8
	CreatedAt     *big.Int
	ClosedAt      *big.Int
}, error) {
	return _Escrow.Contract.GetEscrow(&_Escrow.CallOpts, _escrowId)
}

// GetEscrowPayments is a free data retrieval call binding the contract method 0xfd232b59.
//
// Solidity: function getEscrowPayments(_escrowId uint256) constant returns(amount uint256, totalValueDai uint256, payoutAmount uint256, paidToDappAmount uint256, paidToProviderAmount uint256, paidToClientAmount uint256, paidToArbiterAmount uint256)
func (_Escrow *EscrowCaller) GetEscrowPayments(opts *bind.CallOpts, _escrowId *big.Int) (struct {
	Amount               *big.Int
	TotalValueDai        *big.Int
	PayoutAmount         *big.Int
	PaidToDappAmount     *big.Int
	PaidToProviderAmount *big.Int
	PaidToClientAmount   *big.Int
	PaidToArbiterAmount  *big.Int
}, error) {
	ret := new(struct {
		Amount               *big.Int
		TotalValueDai        *big.Int
		PayoutAmount         *big.Int
		PaidToDappAmount     *big.Int
		PaidToProviderAmount *big.Int
		PaidToClientAmount   *big.Int
		PaidToArbiterAmount  *big.Int
	})
	out := ret
	err := _Escrow.contract.Call(opts, out, "getEscrowPayments", _escrowId)
	return *ret, err
}

// GetEscrowPayments is a free data retrieval call binding the contract method 0xfd232b59.
//
// Solidity: function getEscrowPayments(_escrowId uint256) constant returns(amount uint256, totalValueDai uint256, payoutAmount uint256, paidToDappAmount uint256, paidToProviderAmount uint256, paidToClientAmount uint256, paidToArbiterAmount uint256)
func (_Escrow *EscrowSession) GetEscrowPayments(_escrowId *big.Int) (struct {
	Amount               *big.Int
	TotalValueDai        *big.Int
	PayoutAmount         *big.Int
	PaidToDappAmount     *big.Int
	PaidToProviderAmount *big.Int
	PaidToClientAmount   *big.Int
	PaidToArbiterAmount  *big.Int
}, error) {
	return _Escrow.Contract.GetEscrowPayments(&_Escrow.CallOpts, _escrowId)
}

// GetEscrowPayments is a free data retrieval call binding the contract method 0xfd232b59.
//
// Solidity: function getEscrowPayments(_escrowId uint256) constant returns(amount uint256, totalValueDai uint256, payoutAmount uint256, paidToDappAmount uint256, paidToProviderAmount uint256, paidToClientAmount uint256, paidToArbiterAmount uint256)
func (_Escrow *EscrowCallerSession) GetEscrowPayments(_escrowId *big.Int) (struct {
	Amount               *big.Int
	TotalValueDai        *big.Int
	PayoutAmount         *big.Int
	PaidToDappAmount     *big.Int
	PaidToProviderAmount *big.Int
	PaidToClientAmount   *big.Int
	PaidToArbiterAmount  *big.Int
}, error) {
	return _Escrow.Contract.GetEscrowPayments(&_Escrow.CallOpts, _escrowId)
}

// IsMigrated is a free data retrieval call binding the contract method 0xc0bac1a8.
//
// Solidity: function isMigrated(contractName string, migrationId string) constant returns(bool)
func (_Escrow *EscrowCaller) IsMigrated(opts *bind.CallOpts, contractName string, migrationId string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Escrow.contract.Call(opts, out, "isMigrated", contractName, migrationId)
	return *ret0, err
}

// IsMigrated is a free data retrieval call binding the contract method 0xc0bac1a8.
//
// Solidity: function isMigrated(contractName string, migrationId string) constant returns(bool)
func (_Escrow *EscrowSession) IsMigrated(contractName string, migrationId string) (bool, error) {
	return _Escrow.Contract.IsMigrated(&_Escrow.CallOpts, contractName, migrationId)
}

// IsMigrated is a free data retrieval call binding the contract method 0xc0bac1a8.
//
// Solidity: function isMigrated(contractName string, migrationId string) constant returns(bool)
func (_Escrow *EscrowCallerSession) IsMigrated(contractName string, migrationId string) (bool, error) {
	return _Escrow.Contract.IsMigrated(&_Escrow.CallOpts, contractName, migrationId)
}

// PriceOracle is a free data retrieval call binding the contract method 0x2630c12f.
//
// Solidity: function priceOracle() constant returns(address)
func (_Escrow *EscrowCaller) PriceOracle(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Escrow.contract.Call(opts, out, "priceOracle")
	return *ret0, err
}

// PriceOracle is a free data retrieval call binding the contract method 0x2630c12f.
//
// Solidity: function priceOracle() constant returns(address)
func (_Escrow *EscrowSession) PriceOracle() (common.Address, error) {
	return _Escrow.Contract.PriceOracle(&_Escrow.CallOpts)
}

// PriceOracle is a free data retrieval call binding the contract method 0x2630c12f.
//
// Solidity: function priceOracle() constant returns(address)
func (_Escrow *EscrowCallerSession) PriceOracle() (common.Address, error) {
	return _Escrow.Contract.PriceOracle(&_Escrow.CallOpts)
}

// EscrowMigratedIterator is returned from FilterMigrated and is used to iterate over the raw logs and unpacked data for Migrated events raised by the Escrow contract.
type EscrowMigratedIterator struct {
	Event *EscrowMigrated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EscrowMigratedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EscrowMigrated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EscrowMigrated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EscrowMigratedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EscrowMigratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EscrowMigrated represents a Migrated event raised by the Escrow contract.
type EscrowMigrated struct {
	ContractName string
	MigrationId  string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterMigrated is a free log retrieval operation binding the contract event 0xdd117a11c22118c9dee4b5a67ce578bc44529dce21ee0ccc439588fbb9fb4ea3.
//
// Solidity: e Migrated(contractName string, migrationId string)
func (_Escrow *EscrowFilterer) FilterMigrated(opts *bind.FilterOpts) (*EscrowMigratedIterator, error) {

	logs, sub, err := _Escrow.contract.FilterLogs(opts, "Migrated")
	if err != nil {
		return nil, err
	}
	return &EscrowMigratedIterator{contract: _Escrow.contract, event: "Migrated", logs: logs, sub: sub}, nil
}

// WatchMigrated is a free log subscription operation binding the contract event 0xdd117a11c22118c9dee4b5a67ce578bc44529dce21ee0ccc439588fbb9fb4ea3.
//
// Solidity: e Migrated(contractName string, migrationId string)
func (_Escrow *EscrowFilterer) WatchMigrated(opts *bind.WatchOpts, sink chan<- *EscrowMigrated) (event.Subscription, error) {

	logs, sub, err := _Escrow.contract.WatchLogs(opts, "Migrated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EscrowMigrated)
				if err := _Escrow.contract.UnpackLog(event, "Migrated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// EscrowOnCancelEscrowIterator is returned from FilterOnCancelEscrow and is used to iterate over the raw logs and unpacked data for OnCancelEscrow events raised by the Escrow contract.
type EscrowOnCancelEscrowIterator struct {
	Event *EscrowOnCancelEscrow // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EscrowOnCancelEscrowIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EscrowOnCancelEscrow)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EscrowOnCancelEscrow)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EscrowOnCancelEscrowIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EscrowOnCancelEscrowIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EscrowOnCancelEscrow represents a OnCancelEscrow event raised by the Escrow contract.
type EscrowOnCancelEscrow struct {
	Dapp                common.Address
	EscrowId            *big.Int
	PayToProviderAmount *big.Int
	Arbiter             common.Address
	PayToArbiterAmount  *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterOnCancelEscrow is a free log retrieval operation binding the contract event 0x23157ee5a4e89bcebb1fc3e9b6e1533aefe88f9bde92308b49a71e800103542b.
//
// Solidity: e OnCancelEscrow(dapp indexed address, escrowId indexed uint256, payToProviderAmount uint256, arbiter indexed address, payToArbiterAmount uint256)
func (_Escrow *EscrowFilterer) FilterOnCancelEscrow(opts *bind.FilterOpts, dapp []common.Address, escrowId []*big.Int, arbiter []common.Address) (*EscrowOnCancelEscrowIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var escrowIdRule []interface{}
	for _, escrowIdItem := range escrowId {
		escrowIdRule = append(escrowIdRule, escrowIdItem)
	}

	var arbiterRule []interface{}
	for _, arbiterItem := range arbiter {
		arbiterRule = append(arbiterRule, arbiterItem)
	}

	logs, sub, err := _Escrow.contract.FilterLogs(opts, "OnCancelEscrow", dappRule, escrowIdRule, arbiterRule)
	if err != nil {
		return nil, err
	}
	return &EscrowOnCancelEscrowIterator{contract: _Escrow.contract, event: "OnCancelEscrow", logs: logs, sub: sub}, nil
}

// WatchOnCancelEscrow is a free log subscription operation binding the contract event 0x23157ee5a4e89bcebb1fc3e9b6e1533aefe88f9bde92308b49a71e800103542b.
//
// Solidity: e OnCancelEscrow(dapp indexed address, escrowId indexed uint256, payToProviderAmount uint256, arbiter indexed address, payToArbiterAmount uint256)
func (_Escrow *EscrowFilterer) WatchOnCancelEscrow(opts *bind.WatchOpts, sink chan<- *EscrowOnCancelEscrow, dapp []common.Address, escrowId []*big.Int, arbiter []common.Address) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var escrowIdRule []interface{}
	for _, escrowIdItem := range escrowId {
		escrowIdRule = append(escrowIdRule, escrowIdItem)
	}

	var arbiterRule []interface{}
	for _, arbiterItem := range arbiter {
		arbiterRule = append(arbiterRule, arbiterItem)
	}

	logs, sub, err := _Escrow.contract.WatchLogs(opts, "OnCancelEscrow", dappRule, escrowIdRule, arbiterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EscrowOnCancelEscrow)
				if err := _Escrow.contract.UnpackLog(event, "OnCancelEscrow", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// EscrowOnCancelEscrowByProviderIterator is returned from FilterOnCancelEscrowByProvider and is used to iterate over the raw logs and unpacked data for OnCancelEscrowByProvider events raised by the Escrow contract.
type EscrowOnCancelEscrowByProviderIterator struct {
	Event *EscrowOnCancelEscrowByProvider // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EscrowOnCancelEscrowByProviderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EscrowOnCancelEscrowByProvider)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EscrowOnCancelEscrowByProvider)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EscrowOnCancelEscrowByProviderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EscrowOnCancelEscrowByProviderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EscrowOnCancelEscrowByProvider represents a OnCancelEscrowByProvider event raised by the Escrow contract.
type EscrowOnCancelEscrowByProvider struct {
	Dapp     common.Address
	EscrowId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOnCancelEscrowByProvider is a free log retrieval operation binding the contract event 0x42a9d051cfad92ff80e72d1f2fe48fd37941d2e3d8a231b4a2a6993474dd6726.
//
// Solidity: e OnCancelEscrowByProvider(dapp indexed address, escrowId indexed uint256)
func (_Escrow *EscrowFilterer) FilterOnCancelEscrowByProvider(opts *bind.FilterOpts, dapp []common.Address, escrowId []*big.Int) (*EscrowOnCancelEscrowByProviderIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var escrowIdRule []interface{}
	for _, escrowIdItem := range escrowId {
		escrowIdRule = append(escrowIdRule, escrowIdItem)
	}

	logs, sub, err := _Escrow.contract.FilterLogs(opts, "OnCancelEscrowByProvider", dappRule, escrowIdRule)
	if err != nil {
		return nil, err
	}
	return &EscrowOnCancelEscrowByProviderIterator{contract: _Escrow.contract, event: "OnCancelEscrowByProvider", logs: logs, sub: sub}, nil
}

// WatchOnCancelEscrowByProvider is a free log subscription operation binding the contract event 0x42a9d051cfad92ff80e72d1f2fe48fd37941d2e3d8a231b4a2a6993474dd6726.
//
// Solidity: e OnCancelEscrowByProvider(dapp indexed address, escrowId indexed uint256)
func (_Escrow *EscrowFilterer) WatchOnCancelEscrowByProvider(opts *bind.WatchOpts, sink chan<- *EscrowOnCancelEscrowByProvider, dapp []common.Address, escrowId []*big.Int) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var escrowIdRule []interface{}
	for _, escrowIdItem := range escrowId {
		escrowIdRule = append(escrowIdRule, escrowIdItem)
	}

	logs, sub, err := _Escrow.contract.WatchLogs(opts, "OnCancelEscrowByProvider", dappRule, escrowIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EscrowOnCancelEscrowByProvider)
				if err := _Escrow.contract.UnpackLog(event, "OnCancelEscrowByProvider", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// EscrowOnCompleteEscrowIterator is returned from FilterOnCompleteEscrow and is used to iterate over the raw logs and unpacked data for OnCompleteEscrow events raised by the Escrow contract.
type EscrowOnCompleteEscrowIterator struct {
	Event *EscrowOnCompleteEscrow // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EscrowOnCompleteEscrowIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EscrowOnCompleteEscrow)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EscrowOnCompleteEscrow)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EscrowOnCompleteEscrowIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EscrowOnCompleteEscrowIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EscrowOnCompleteEscrow represents a OnCompleteEscrow event raised by the Escrow contract.
type EscrowOnCompleteEscrow struct {
	Dapp     common.Address
	EscrowId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterOnCompleteEscrow is a free log retrieval operation binding the contract event 0x4bebfffc0dc0fb54ffd42c8fe2424e8fe0c482f089c4d0d6e6f1ea5d9e34248a.
//
// Solidity: e OnCompleteEscrow(dapp indexed address, escrowId indexed uint256)
func (_Escrow *EscrowFilterer) FilterOnCompleteEscrow(opts *bind.FilterOpts, dapp []common.Address, escrowId []*big.Int) (*EscrowOnCompleteEscrowIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var escrowIdRule []interface{}
	for _, escrowIdItem := range escrowId {
		escrowIdRule = append(escrowIdRule, escrowIdItem)
	}

	logs, sub, err := _Escrow.contract.FilterLogs(opts, "OnCompleteEscrow", dappRule, escrowIdRule)
	if err != nil {
		return nil, err
	}
	return &EscrowOnCompleteEscrowIterator{contract: _Escrow.contract, event: "OnCompleteEscrow", logs: logs, sub: sub}, nil
}

// WatchOnCompleteEscrow is a free log subscription operation binding the contract event 0x4bebfffc0dc0fb54ffd42c8fe2424e8fe0c482f089c4d0d6e6f1ea5d9e34248a.
//
// Solidity: e OnCompleteEscrow(dapp indexed address, escrowId indexed uint256)
func (_Escrow *EscrowFilterer) WatchOnCompleteEscrow(opts *bind.WatchOpts, sink chan<- *EscrowOnCompleteEscrow, dapp []common.Address, escrowId []*big.Int) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var escrowIdRule []interface{}
	for _, escrowIdItem := range escrowId {
		escrowIdRule = append(escrowIdRule, escrowIdItem)
	}

	logs, sub, err := _Escrow.contract.WatchLogs(opts, "OnCompleteEscrow", dappRule, escrowIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EscrowOnCompleteEscrow)
				if err := _Escrow.contract.UnpackLog(event, "OnCompleteEscrow", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// EscrowOnCreateEscrowIterator is returned from FilterOnCreateEscrow and is used to iterate over the raw logs and unpacked data for OnCreateEscrow events raised by the Escrow contract.
type EscrowOnCreateEscrowIterator struct {
	Event *EscrowOnCreateEscrow // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EscrowOnCreateEscrowIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EscrowOnCreateEscrow)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EscrowOnCreateEscrow)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EscrowOnCreateEscrowIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EscrowOnCreateEscrowIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EscrowOnCreateEscrow represents a OnCreateEscrow event raised by the Escrow contract.
type EscrowOnCreateEscrow struct {
	Dapp      common.Address
	Client    common.Address
	Provider  common.Address
	Amount    *big.Int
	DaiAmount *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterOnCreateEscrow is a free log retrieval operation binding the contract event 0x2deff110fb90284ba1ebd12f5a2a449109b5327e5144dcf39bae0fa2fcfa7afb.
//
// Solidity: e OnCreateEscrow(dapp indexed address, client indexed address, provider indexed address, amount uint256, daiAmount uint256)
func (_Escrow *EscrowFilterer) FilterOnCreateEscrow(opts *bind.FilterOpts, dapp []common.Address, client []common.Address, provider []common.Address) (*EscrowOnCreateEscrowIterator, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var clientRule []interface{}
	for _, clientItem := range client {
		clientRule = append(clientRule, clientItem)
	}
	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _Escrow.contract.FilterLogs(opts, "OnCreateEscrow", dappRule, clientRule, providerRule)
	if err != nil {
		return nil, err
	}
	return &EscrowOnCreateEscrowIterator{contract: _Escrow.contract, event: "OnCreateEscrow", logs: logs, sub: sub}, nil
}

// WatchOnCreateEscrow is a free log subscription operation binding the contract event 0x2deff110fb90284ba1ebd12f5a2a449109b5327e5144dcf39bae0fa2fcfa7afb.
//
// Solidity: e OnCreateEscrow(dapp indexed address, client indexed address, provider indexed address, amount uint256, daiAmount uint256)
func (_Escrow *EscrowFilterer) WatchOnCreateEscrow(opts *bind.WatchOpts, sink chan<- *EscrowOnCreateEscrow, dapp []common.Address, client []common.Address, provider []common.Address) (event.Subscription, error) {

	var dappRule []interface{}
	for _, dappItem := range dapp {
		dappRule = append(dappRule, dappItem)
	}
	var clientRule []interface{}
	for _, clientItem := range client {
		clientRule = append(clientRule, clientItem)
	}
	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _Escrow.contract.WatchLogs(opts, "OnCreateEscrow", dappRule, clientRule, providerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EscrowOnCreateEscrow)
				if err := _Escrow.contract.UnpackLog(event, "OnCreateEscrow", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// EscrowOnInitializeIterator is returned from FilterOnInitialize and is used to iterate over the raw logs and unpacked data for OnInitialize events raised by the Escrow contract.
type EscrowOnInitializeIterator struct {
	Event *EscrowOnInitialize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EscrowOnInitializeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EscrowOnInitialize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EscrowOnInitialize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EscrowOnInitializeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EscrowOnInitializeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EscrowOnInitialize represents a OnInitialize event raised by the Escrow contract.
type EscrowOnInitialize struct {
	Token       common.Address
	DApp        common.Address
	PriceOracle common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterOnInitialize is a free log retrieval operation binding the contract event 0x92bd6b72cc9afdcca9b04e941a144617e9c12e1b5160a3fb40163fe4a786bff0.
//
// Solidity: e OnInitialize(token indexed address, dApp indexed address, priceOracle address)
func (_Escrow *EscrowFilterer) FilterOnInitialize(opts *bind.FilterOpts, token []common.Address, dApp []common.Address) (*EscrowOnInitializeIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var dAppRule []interface{}
	for _, dAppItem := range dApp {
		dAppRule = append(dAppRule, dAppItem)
	}

	logs, sub, err := _Escrow.contract.FilterLogs(opts, "OnInitialize", tokenRule, dAppRule)
	if err != nil {
		return nil, err
	}
	return &EscrowOnInitializeIterator{contract: _Escrow.contract, event: "OnInitialize", logs: logs, sub: sub}, nil
}

// WatchOnInitialize is a free log subscription operation binding the contract event 0x92bd6b72cc9afdcca9b04e941a144617e9c12e1b5160a3fb40163fe4a786bff0.
//
// Solidity: e OnInitialize(token indexed address, dApp indexed address, priceOracle address)
func (_Escrow *EscrowFilterer) WatchOnInitialize(opts *bind.WatchOpts, sink chan<- *EscrowOnInitialize, token []common.Address, dApp []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var dAppRule []interface{}
	for _, dAppItem := range dApp {
		dAppRule = append(dAppRule, dAppItem)
	}

	logs, sub, err := _Escrow.contract.WatchLogs(opts, "OnInitialize", tokenRule, dAppRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EscrowOnInitialize)
				if err := _Escrow.contract.UnpackLog(event, "OnInitialize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MigratableABI is the input ABI used to generate the binding from.
const MigratableABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"migrationId\",\"type\":\"string\"}],\"name\":\"isMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"migrationId\",\"type\":\"string\"}],\"name\":\"Migrated\",\"type\":\"event\"}]"

// MigratableBin is the compiled bytecode used for deploying new contracts.
const MigratableBin = `0x608060405234801561001057600080fd5b506101e3806100206000396000f3006080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c0bac1a88114610045575b600080fd5b34801561005157600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100dc94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506100f09650505050505050565b604080519115158252519081900360200190f35b600080836040518082805190602001908083835b602083106101235780518252601f199092019160209182019101610104565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101842086519094879450925082918401908083835b6020831061017f5780518252601f199092019160209182019101610160565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff16959450505050505600a165627a7a72305820ffe63abcee9941e159bc152b607835e65ee15e7169d333b79e27e372c86a7cdc0029`

// DeployMigratable deploys a new Ethereum contract, binding an instance of Migratable to it.
func DeployMigratable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Migratable, error) {
	parsed, err := abi.JSON(strings.NewReader(MigratableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MigratableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Migratable{MigratableCaller: MigratableCaller{contract: contract}, MigratableTransactor: MigratableTransactor{contract: contract}, MigratableFilterer: MigratableFilterer{contract: contract}}, nil
}

// Migratable is an auto generated Go binding around an Ethereum contract.
type Migratable struct {
	MigratableCaller     // Read-only binding to the contract
	MigratableTransactor // Write-only binding to the contract
	MigratableFilterer   // Log filterer for contract events
}

// MigratableCaller is an auto generated read-only Go binding around an Ethereum contract.
type MigratableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigratableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MigratableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigratableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MigratableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigratableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MigratableSession struct {
	Contract     *Migratable       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MigratableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MigratableCallerSession struct {
	Contract *MigratableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// MigratableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MigratableTransactorSession struct {
	Contract     *MigratableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MigratableRaw is an auto generated low-level Go binding around an Ethereum contract.
type MigratableRaw struct {
	Contract *Migratable // Generic contract binding to access the raw methods on
}

// MigratableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MigratableCallerRaw struct {
	Contract *MigratableCaller // Generic read-only contract binding to access the raw methods on
}

// MigratableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MigratableTransactorRaw struct {
	Contract *MigratableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMigratable creates a new instance of Migratable, bound to a specific deployed contract.
func NewMigratable(address common.Address, backend bind.ContractBackend) (*Migratable, error) {
	contract, err := bindMigratable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Migratable{MigratableCaller: MigratableCaller{contract: contract}, MigratableTransactor: MigratableTransactor{contract: contract}, MigratableFilterer: MigratableFilterer{contract: contract}}, nil
}

// NewMigratableCaller creates a new read-only instance of Migratable, bound to a specific deployed contract.
func NewMigratableCaller(address common.Address, caller bind.ContractCaller) (*MigratableCaller, error) {
	contract, err := bindMigratable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MigratableCaller{contract: contract}, nil
}

// NewMigratableTransactor creates a new write-only instance of Migratable, bound to a specific deployed contract.
func NewMigratableTransactor(address common.Address, transactor bind.ContractTransactor) (*MigratableTransactor, error) {
	contract, err := bindMigratable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MigratableTransactor{contract: contract}, nil
}

// NewMigratableFilterer creates a new log filterer instance of Migratable, bound to a specific deployed contract.
func NewMigratableFilterer(address common.Address, filterer bind.ContractFilterer) (*MigratableFilterer, error) {
	contract, err := bindMigratable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MigratableFilterer{contract: contract}, nil
}

// bindMigratable binds a generic wrapper to an already deployed contract.
func bindMigratable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MigratableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Migratable *MigratableRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Migratable.Contract.MigratableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Migratable *MigratableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Migratable.Contract.MigratableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Migratable *MigratableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Migratable.Contract.MigratableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Migratable *MigratableCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Migratable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Migratable *MigratableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Migratable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Migratable *MigratableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Migratable.Contract.contract.Transact(opts, method, params...)
}

// IsMigrated is a free data retrieval call binding the contract method 0xc0bac1a8.
//
// Solidity: function isMigrated(contractName string, migrationId string) constant returns(bool)
func (_Migratable *MigratableCaller) IsMigrated(opts *bind.CallOpts, contractName string, migrationId string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Migratable.contract.Call(opts, out, "isMigrated", contractName, migrationId)
	return *ret0, err
}

// IsMigrated is a free data retrieval call binding the contract method 0xc0bac1a8.
//
// Solidity: function isMigrated(contractName string, migrationId string) constant returns(bool)
func (_Migratable *MigratableSession) IsMigrated(contractName string, migrationId string) (bool, error) {
	return _Migratable.Contract.IsMigrated(&_Migratable.CallOpts, contractName, migrationId)
}

// IsMigrated is a free data retrieval call binding the contract method 0xc0bac1a8.
//
// Solidity: function isMigrated(contractName string, migrationId string) constant returns(bool)
func (_Migratable *MigratableCallerSession) IsMigrated(contractName string, migrationId string) (bool, error) {
	return _Migratable.Contract.IsMigrated(&_Migratable.CallOpts, contractName, migrationId)
}

// MigratableMigratedIterator is returned from FilterMigrated and is used to iterate over the raw logs and unpacked data for Migrated events raised by the Migratable contract.
type MigratableMigratedIterator struct {
	Event *MigratableMigrated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MigratableMigratedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MigratableMigrated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MigratableMigrated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MigratableMigratedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MigratableMigratedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MigratableMigrated represents a Migrated event raised by the Migratable contract.
type MigratableMigrated struct {
	ContractName string
	MigrationId  string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterMigrated is a free log retrieval operation binding the contract event 0xdd117a11c22118c9dee4b5a67ce578bc44529dce21ee0ccc439588fbb9fb4ea3.
//
// Solidity: e Migrated(contractName string, migrationId string)
func (_Migratable *MigratableFilterer) FilterMigrated(opts *bind.FilterOpts) (*MigratableMigratedIterator, error) {

	logs, sub, err := _Migratable.contract.FilterLogs(opts, "Migrated")
	if err != nil {
		return nil, err
	}
	return &MigratableMigratedIterator{contract: _Migratable.contract, event: "Migrated", logs: logs, sub: sub}, nil
}

// WatchMigrated is a free log subscription operation binding the contract event 0xdd117a11c22118c9dee4b5a67ce578bc44529dce21ee0ccc439588fbb9fb4ea3.
//
// Solidity: e Migrated(contractName string, migrationId string)
func (_Migratable *MigratableFilterer) WatchMigrated(opts *bind.WatchOpts, sink chan<- *MigratableMigrated) (event.Subscription, error) {

	logs, sub, err := _Migratable.contract.WatchLogs(opts, "Migrated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MigratableMigrated)
				if err := _Migratable.contract.UnpackLog(event, "Migrated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// SafeMathABI is the input ABI used to generate the binding from.
const SafeMathABI = "[]"

// SafeMathBin is the compiled bytecode used for deploying new contracts.
const SafeMathBin = `0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a7230582009c9708e7fd727d237f629c295eaee43be454d48e51d6ab0c97bc63ed295f1b10029`

// DeploySafeMath deploys a new Ethereum contract, binding an instance of SafeMath to it.
func DeploySafeMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeMath, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SafeMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// SafeMath is an auto generated Go binding around an Ethereum contract.
type SafeMath struct {
	SafeMathCaller     // Read-only binding to the contract
	SafeMathTransactor // Write-only binding to the contract
	SafeMathFilterer   // Log filterer for contract events
}

// SafeMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type SafeMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SafeMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SafeMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SafeMathSession struct {
	Contract     *SafeMath         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SafeMathCallerSession struct {
	Contract *SafeMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// SafeMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SafeMathTransactorSession struct {
	Contract     *SafeMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SafeMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type SafeMathRaw struct {
	Contract *SafeMath // Generic contract binding to access the raw methods on
}

// SafeMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SafeMathCallerRaw struct {
	Contract *SafeMathCaller // Generic read-only contract binding to access the raw methods on
}

// SafeMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SafeMathTransactorRaw struct {
	Contract *SafeMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeMath creates a new instance of SafeMath, bound to a specific deployed contract.
func NewSafeMath(address common.Address, backend bind.ContractBackend) (*SafeMath, error) {
	contract, err := bindSafeMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// NewSafeMathCaller creates a new read-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathCaller(address common.Address, caller bind.ContractCaller) (*SafeMathCaller, error) {
	contract, err := bindSafeMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathCaller{contract: contract}, nil
}

// NewSafeMathTransactor creates a new write-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathTransactor(address common.Address, transactor bind.ContractTransactor) (*SafeMathTransactor, error) {
	contract, err := bindSafeMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathTransactor{contract: contract}, nil
}

// NewSafeMathFilterer creates a new log filterer instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathFilterer(address common.Address, filterer bind.ContractFilterer) (*SafeMathFilterer, error) {
	contract, err := bindSafeMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeMathFilterer{contract: contract}, nil
}

// bindSafeMath binds a generic wrapper to an already deployed contract.
func bindSafeMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.SafeMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transact(opts, method, params...)
}
